---
title: "Lecture 2A: Reproducibility"
subtitle: "September 9, 2025"
date-modified: last-modified
bibliography: ../bibliography.bib
csl: ../../diabetologia.csl
---

## Learning Objectives

From today’s class, students are anticipated to be able to:

-   Use basic markdown features.

-   Write documents in markdown.

-   Choose whether html or pdf is an appropriate output.

-   Style an .Rmd document by editing the YAML header.

-   Customize code chunk output using Rmd code chunk.

-   Render your finalized document to HTML & PDF.

## Resources High-level video lecture for today:

Here are a number of resources that may help supplement you with today's lesson:

-   [STAT 545 Episode 3-A: Reproducible Reports with R Markdown Some additional resources that you might find useful:](https://www.youtube.com/watch?v=ZzDSkBgt9xQ)

-   [The Official R Markdown Tutorial](https://rmarkdown.rstudio.com/lesson-1.html) from the “Introduction” up to and including the “Inline Code” section.

-   [R Markdown cheat sheet](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://enterprise.github.com/downloads/en/markdown-cheatsheet.pdf)

Note that many cheat sheets can be found from RStudio: go to "Help" -\> "Cheatsheets".

## Reproducibility

*Reproducibility* is the ability of an independent researcher to repeat an experiment using the [same data and workflow]{.underline} to obtain the same results [@resnik2017reproducibility]. One way to ensure reproducible research is sharing clear details on the analysis and providing the code used to produce the results. Reproducibility is often confused with *replication*. However, replication is a separate concept where the results of a study should be validated on an independent study using new data. A "good" study is both replicable and reproducible.

There are also ethical benefits to reproducible research [@resnik2017reproducibility]. Performing open research can reduce the chance of data fabrication or other ethical issues such as *p-hacking*, where a researcher tests a number of hypotheses until they find one that is statistically significant. Open, transparent research poses a sense of accountability on the researcher(s). Of course, you can't always share data (for example, health data containing personal identifying information), but you should share as much as is possible. Always check with your ethics board or principal investigator before sharing data online.

Reproducible studies can also advance research by providing the code used for analysis. Not only can we reproduce the study to make the findings more trustworthy, but we can learn more about how the analysis was performed and possibly apply it to other studies.

Reproducible research can also force you to have better, more automated workflows. The first analysis I ever did in R, I was manually changing things in excel documents, and then saving them in a certain place, and then using R to fit a model, and then exporting the data, and then changing the worksheet format, and so on. I had a sticky note of instructions on how to produce the results on my desk. This was neither reproducible nor productive for my time. While automating some steps and using tools like GitHub for version control can be more work upfront, it can save you *a lot* of headaches down the road. It is something I personally wish I learned to use earlier in my career.

## R Markdown

Using an editor like MS Word is like painting: you decorate the page with text, graphs, and tables, making sure things are positioned, sized, and coloured appropriately.

This is great for a letter to a friend, but is less great for scientific work, because it hampers reproducibility and shareability.

R Markdown lets you write a single “blueprint” for your analysis that includes everything - positioning/sizing/colouring/formatting, analysis/graph/table code and results, and text – and then “knit” all of those components together into a complete report with a single button press.

There is a large community of R Markdown users, making it easy to find tutorials and blog posts about a ton of different types of documents. We're going to start simple and dive right into R Markdown.

### Getting Started with Markdown

In lecture, we are going to work through [this online Markdown tutorial together](https://www.markdowntutorial.com/) in small groups. Challenge yourself to meet someone new in the class!

After completing the tutorial, try making your own R Markdown document!

1.  In RStudio, go to “File” -\> “New File” -\> “Markdown File”

2.  Write a Markdown document all about you that includes:

    -   A header

    -   A link to your GitHub profile

    -   A list of courses you're taking this semester

3.  Click the “Preview” button to generate an output .html file from the source .md file.

### Install RMarkdown

1.  Open a new .Rmd file in RStudio ("File" \> "New File" \> "RMarkdown..."). Add "STAT545_Lecture_2" as your title and save the other default options.

2.  To get started with using R Markdown, you’ll need to install the rmarkdown R package. You might automatically be prompted to do this; accept, if so. If not, you will have to manually install the package.

    `install.packages('rmarkdown')`

3.  After installation, install the DT package:

    `install.packages('DT')`

4.  Click “knit”.

**Things to notice:**

-   The YAML header is contained between two --- at the top of the .Rmd source, and contains metadata on the document. This is where you specify the output type to be HTML.

-   Text is formatted using Markdown. There are three chunks of R code, and knitting executes the R code and displays the output in the output file.

**How does it all work?**

The key drivers under the hood are `knitr`and `Pandoc`! When you press “Knit”, R Markdown passes the .`Rmd`file to `knitr`, which executes all of the code and creates a new `.md` file including the code and output. Then, that `.md` file is processed into the final output format (e.g. `.html`) by pandoc.

### Your Turn: Edit Your YAML in Small Groups:

Run `?html_document` from your R console and/or check out [Yihui Xie’s RMarkdown book](https://bookdown.org/yihui/rmarkdown/html-document.html) to:

-   Add a floating table of contents

-   Add a theme.

If this was easy, then try to figure out how to knit to a pdf document!

### Instructor demo: mtcars Report

To follow along, download the [demonstration.Rmd](https://raw.githubusercontent.com/UBC-STAT/stat545.stat.ubc.ca/master/content/notes/notes-a03/mtcars_demonstration.Rmd) file from the STAT545 GitHub and open it in RStudio.

#### Exploting Code Chunks

1.  Add a code chunk below the first paragraph in the “Motor Trend Car Road Tests data” section of the `.Rmd` file. Either select “Code” -\> “Insert Chunk”, or use a keyboard shortcut: `cmd + option + I`(MAC) / `ctrl + alt + i`(WINDOWS).

2.  In this code chunk, print out the `mtcars` data frame to explore the output. (Yes, this object comes shipped with R.)

3.  Run that chunk interactively using the green ‘play’ button.

4.  Now try out the `DT::datatable()` function on mtcars in this new chunk, and knit the file (to html, ideally).

5.  Add an in-line code chunk specifying the number of rows of the `mtcars` dataset in place of the hardcoded number “32 automobiles”. Hint: `nrow()`.

6.  Fill in the document with markdown commentary for each of the code chunks! A few notes go a long way towards improving the readability of the report.

#### Exploring chunk options

Got lost in the demonstration? No problem, just open a new .Rmd file in RStudio via “File” -\> “New File” -\> “R Markdown…”, and just press “OK”, and resume!)

Just like YAML is metadata for the Rmd document, code chunk options are metadata for the code chunk. Specify them within the `{r}` at the top of a code chunk, separated by commas. For a list of chunk options, check out [Yihui Xie’s knitr book](https://yihui.org/knitr/options/). Let’s try some:

1.  Hide the code from the output with `echo = FALSE.`

2.  Change the figure width and height with `fig.width = 5` and `fig.height = 3`.

3.  Knit the results. Can you spot the differences?

### Your turn: data update!

In the instructor demo, we prettied up a nice report about `mtcars` together. But suddenly, you receive an email from your collaborator who collected the `mtcars` data, who says that the data on Mazda RX4, the Valiant, and the Volvo 142E were transcribed wrong from the magazine! They’re going to work on correcting them, but in the mean time, they’d like to re-run the analysis with those three cars excluded.

In small groups, prepare an updated report by updating your `.Rmd` appropriately, then re-knitting it. Then discuss: in this case, how did using the RMarkdown workflow rather than copying and pasting R output to MS Word help prevent the creation of non-reproducible results?

## Attribution

*Thanks to Icíar Fernández Boyano’s help in putting this demonstration together. Inspiration for activity ideas drawn from Nicholas Tierney’s R Markdown for Scientists book, the R Markdown for Medicine workshop materials, and the UBC MDS program.*
