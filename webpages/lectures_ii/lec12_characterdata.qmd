---
title: "Lecture 12: StringR and Regular Expressions"
subtitle: "November 18, 2025"
date-modified: last-modified
---

From this topic, students are anticipated to be able to:

-   Manipulate a character vector in R using the stringr package.

-   Write simple regular expressions (regex).

-   Apply stringr and regular expressions to manipulate data in tibbles.

We will require the following packages:

```{r}
library(tidyverse) #stringr is automatically downloaded with tidyverse
```

## Strings

You’ve used a bunch of strings at this point without knowing explicitly what they are: any time you surround text by `"`, you’ve been making a *string*: a storage format for text. In R, they are of type “character”.

```{r}
sample_string <- "This is a string" 
typeof(sample_string)
```

Two places where you’ll often want to manipulate these in data analysis:

-   Cleaning up column/variable names

-   Cleaning up character column values

**Good to know**: Constructing strings out of characters and numbers is intuitive, but there’s a gotcha involving particular symbols with special meaning in R. For example, try running `quote <- """` in R; it won’t work, because the `"` symbol is interpreted as you trying to make a string! To literally include a quote in a string, you can use the `\` character to “escape” it:

```{r}
single_quote <- "\""
cat(single_quote)
```

You can see more examples of special characters and how to escape them in [R4DS Chapter 15.2](https://r4ds.hadley.nz/strings#creating-a-string).

## Working with Strings

Our main tools for working with strings will be the powerful `stringr` package in the tidyverse paired with regular expressions (also called *regex*).

We'll be going through a few examples with the `enron` dataset, which you can [download on Github.](https://github.com/UBC-STAT/STAT545.github.io/tree/main/webpages/lectures_ii/datasets) Enron is a database of 270,087 Enron emails, taken from the May 7, 2015 version of the dataset. Data was extracted [from CMU](https://www.cs.cmu.edu/~enron/). There are three columns in `enron.csv`:

-   `person`: The person associated with the email.

-   `mail_num`: Identifier for each person's email.

-   `email`: Each entry is a line in an email, including the email's metadata (like subject, who it was sent to, etc.)

Let's load in the data:

```{r}

```

### Non-regex String Manipulation

We'll first go through some `stringr` functions that **don't** require regular expressions.

## **Worksheet B2**

### Class 1

-   **Before class**, start working on parts I and II of Worksheet B2.

-   Class will be dedicated to getting your questions answered.

-   Done early? Then do the optional R4DS Strings and R4DS Regular expressions readings (linked above), and do exercises for extra practice.

### Class 2

-   **Before class**, start working on parts II and III of Worksheet B2.

-   Class will be dedicated to getting your questions answered.

-   Done early? Then do the optional R4DS Strings and R4DS Regular expressions readings (linked above), and do exercises for extra practice. Or, start Assignment B4.

## Resources

Video lecture:

-   [Regular Expressions and stringr for Text Data](https://www.youtube.com/watch?v=I0dJ1zpxAtU) (only labelled as “age restricted” because it looks at real emails within the Enron company.)

Written material:

-   Overview tutorials similar to our worksheet:

    -   [stat545.com Chapter 11: character vectors](https://stat545.com/character-vectors.html)

    -   [R4DS Chapter 15: strings](https://r4ds.hadley.nz/strings.html).

    -   [R4DS Chapter 16: regular expressions](https://r4ds.hadley.nz/regexps).

-   The stat545.com Chapter 11 on character vectors [has an elaborate discussion on useful resources](https://stat545.com/character-vectors.html#resources-3) for learning more about strings.

-   [Regex cheat sheet](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://media.datacamp.com/legacy/image/upload/v1665049611/Marketing/Blog/Regular_Expressions_Cheat_Sheet.pdf)
