[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT545 A/B: Exploratory Data Analysis (Fall 2025)",
    "section": "",
    "text": "Welcome to STAT 545 at the University of British Columbia! Whether you’re a student enrolled in STAT 545 or simply someone looking to learn how to write reproducible and collaborative data analyses, it is our hope that this website will serve as a great resource for learning these new skills!\nIn short, this course will enable you to confidently write clean and modern data analyses in R using version control software (GitHub), and creating reports using R Markdown. The primary focus will be on using these technologies to conduct analyses with daily workflow, rather than the statistical theory and methods for analysis.\n\n\n\n\n\n\n\n\nThis course is divided into two parts. In Part I (STAT545 A), we will introduce\n\nR and RStudio,\nReport generation with R Markdown,\nProject organization, workflow, and coding style,\nData management with dataframes and tibbles using tidyverse,\nData visualization with ggplot2, and\nVersion control using Git and Github.\n\nIn Part II (STAT545 B), we will dive deeper into\n\nWriting functions in R,\nAdvanced computations on data,\nFunctional programming with purrr,\nR packages,\nInteractive pages, apps, and graphics with RShiny, and\nWebsite development using Quarto.\n\nIf you are a student enrolling in this course for credit at UBC, you MUST take STAT 545 A to enroll in STAT545 B. There are no exceptions to this rule."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "STAT545 A/B: Exploratory Data Analysis (Fall 2025)",
    "section": "",
    "text": "Welcome to STAT 545 at the University of British Columbia! Whether you’re a student enrolled in STAT 545 or simply someone looking to learn how to write reproducible and collaborative data analyses, it is our hope that this website will serve as a great resource for learning these new skills!\nIn short, this course will enable you to confidently write clean and modern data analyses in R using version control software (GitHub), and creating reports using R Markdown. The primary focus will be on using these technologies to conduct analyses with daily workflow, rather than the statistical theory and methods for analysis.\n\n\n\n\n\n\n\n\nThis course is divided into two parts. In Part I (STAT545 A), we will introduce\n\nR and RStudio,\nReport generation with R Markdown,\nProject organization, workflow, and coding style,\nData management with dataframes and tibbles using tidyverse,\nData visualization with ggplot2, and\nVersion control using Git and Github.\n\nIn Part II (STAT545 B), we will dive deeper into\n\nWriting functions in R,\nAdvanced computations on data,\nFunctional programming with purrr,\nR packages,\nInteractive pages, apps, and graphics with RShiny, and\nWebsite development using Quarto.\n\nIf you are a student enrolling in this course for credit at UBC, you MUST take STAT 545 A to enroll in STAT545 B. There are no exceptions to this rule."
  },
  {
    "objectID": "index.html#your-teaching-team-2025",
    "href": "index.html#your-teaching-team-2025",
    "title": "STAT545 A/B: Exploratory Data Analysis (Fall 2025)",
    "section": "Your Teaching Team (2025)",
    "text": "Your Teaching Team (2025)\nMy name is Grace Tompkins (she/her) and I’ll be your course instructor. I’m a Biostatistician and recent PhD graduate passionate about teaching! I’m excited to be guiding you throughout this course.\n\n\n\nInstructor: Grace Tompkins\n\n\nI am joined by a wonderful group of TAs, including:\n….\nPlease reach out if you have any concerns or questions at grace&lt;at&gt;stat.ubc.ca, or through our Slack channel."
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html",
    "href": "webpages/lectures/lec2A_reproducibility.html",
    "title": "Lecture 2A: Reproducibility",
    "section": "",
    "text": "From today’s class, students are anticipated to be able to:\n\nUse basic markdown features.\nWrite documents in markdown.\nChoose whether html or pdf is an appropriate output.\nStyle an .Rmd document by editing the YAML header.\nCustomize code chunk output using Rmd code chunk.\nRender your finalized document to HTML & PDF.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#learning-objectives",
    "href": "webpages/lectures/lec2A_reproducibility.html#learning-objectives",
    "title": "Lecture 2A: Reproducibility",
    "section": "",
    "text": "From today’s class, students are anticipated to be able to:\n\nUse basic markdown features.\nWrite documents in markdown.\nChoose whether html or pdf is an appropriate output.\nStyle an .Rmd document by editing the YAML header.\nCustomize code chunk output using Rmd code chunk.\nRender your finalized document to HTML & PDF.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#resources-high-level-video-lecture-for-today",
    "href": "webpages/lectures/lec2A_reproducibility.html#resources-high-level-video-lecture-for-today",
    "title": "Lecture 2A: Reproducibility",
    "section": "Resources High-level video lecture for today:",
    "text": "Resources High-level video lecture for today:\nHere are a number of resources that may help supplement you with today’s lesson:\n\nSTAT 545 Episode 3-A: Reproducible Reports with R Markdown Some additional resources that you might find useful:\nThe Official R Markdown Tutorial from the “Introduction” up to and including the “Inline Code” section.\nR Markdown cheat sheet\n\nNote that many cheat sheets can be found from RStudio: go to “Help” -&gt; “Cheatsheets”.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#reproducibility",
    "href": "webpages/lectures/lec2A_reproducibility.html#reproducibility",
    "title": "Lecture 2A: Reproducibility",
    "section": "Reproducibility",
    "text": "Reproducibility\nReproducibility is the ability of an independent researcher to repeat an experiment using the same data and workflow to obtain the same results [1]. One way to ensure reproducible research is sharing clear details on the analysis and providing the code used to produce the results. Reproducibility is often confused with replication. However, replication is a separate concept where the results of a study should be validated on an independent study using new data. A “good” study is both replicable and reproducible.\nThere are also ethical benefits to reproducible research [1]. Performing open research can reduce the chance of data fabrication or other ethical issues such as p-hacking, where a researcher tests a number of hypotheses until they find one that is statistically significant. Open, transparent research poses a sense of accountability on the researcher(s). Of course, you can’t always share data (for example, health data containing personal identifying information), but you should share as much as is possible. Always check with your ethics board or principal investigator before sharing data online.\nReproducible studies can also advance research by providing the code used for analysis. Not only can we reproduce the study to make the findings more trustworthy, but we can learn more about how the analysis was performed and possibly apply it to other studies.\nReproducible research can also force you to have better, more automated workflows. The first analysis I ever did in R, I was manually changing things in excel documents, and then saving them in a certain place, and then using R to fit a model, and then exporting the data, and then changing the worksheet format, and so on. I had a sticky note of instructions on how to produce the results on my desk. This was neither reproducible nor productive for my time. While automating some steps and using tools like GitHub for version control can be more work upfront, it can save you a lot of headaches down the road. It is something I personally wish I learned to use earlier in my career.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#r-markdown",
    "href": "webpages/lectures/lec2A_reproducibility.html#r-markdown",
    "title": "Lecture 2A: Reproducibility",
    "section": "R Markdown",
    "text": "R Markdown\nUsing an editor like MS Word is like painting: you decorate the page with text, graphs, and tables, making sure things are positioned, sized, and coloured appropriately.\nThis is great for a letter to a friend, but is less great for scientific work, because it hampers reproducibility and shareability.\nR Markdown lets you write a single “blueprint” for your analysis that includes everything - positioning/sizing/colouring/formatting, analysis/graph/table code and results, and text – and then “knit” all of those components together into a complete report with a single button press.\nThere is a large community of R Markdown users, making it easy to find tutorials and blog posts about a ton of different types of documents. We’re going to start simple and dive right into R Markdown.\n\nGetting Started with Markdown\nIn lecture, we are going to work through this online Markdown tutorial together in small groups. Challenge yourself to meet someone new in the class!\nAfter completing the tutorial, try making your own R Markdown document!\n\nIn RStudio, go to “File” -&gt; “New File” -&gt; “Markdown File”\nWrite a Markdown document all about you that includes:\n\nA header\nA link to your GitHub profile\nA list of courses you’re taking this semester\n\nClick the “Preview” button to generate an output .html file from the source .md file.\n\n\n\nInstall RMarkdown\n\nOpen a new .Rmd file in RStudio (“File” &gt; “New File” &gt; “RMarkdown…”). Add “STAT545_Lecture_2” as your title and save the other default options.\nTo get started with using R Markdown, you’ll need to install the rmarkdown R package. You might automatically be prompted to do this; accept, if so. If not, you will have to manually install the package.\ninstall.packages('rmarkdown')\nAfter installation, install the DT package:\ninstall.packages('DT')\nClick “knit”.\n\nThings to notice:\n\nThe YAML header is contained between two — at the top of the .Rmd source, and contains metadata on the document. This is where you specify the output type to be HTML.\nText is formatted using Markdown. There are three chunks of R code, and knitting executes the R code and displays the output in the output file.\n\nHow does it all work?\nThe key drivers under the hood are knitrand Pandoc! When you press “Knit”, R Markdown passes the .Rmdfile to knitr, which executes all of the code and creates a new .md file including the code and output. Then, that .md file is processed into the final output format (e.g. .html) by pandoc.\n\n\nYour Turn: Edit Your YAML in Small Groups:\nRun ?html_document from your R console and/or check out Yihui Xie’s RMarkdown book to:\n\nAdd a floating table of contents\nAdd a theme.\n\nIf this was easy, then try to figure out how to knit to a pdf document!\n\n\nInstructor demo: mtcars Report\nTo follow along, download the demonstration.Rmd file from the STAT545 GitHub and open it in RStudio.\n\nExploting Code Chunks\n\nAdd a code chunk below the first paragraph in the “Motor Trend Car Road Tests data” section of the .Rmd file. Either select “Code” -&gt; “Insert Chunk”, or use a keyboard shortcut: cmd + option + I(MAC) / ctrl + alt + i(WINDOWS).\nIn this code chunk, print out the mtcars data frame to explore the output. (Yes, this object comes shipped with R.)\nRun that chunk interactively using the green ‘play’ button.\nNow try out the DT::datatable() function on mtcars in this new chunk, and knit the file (to html, ideally).\nAdd an in-line code chunk specifying the number of rows of the mtcars dataset in place of the hardcoded number “32 automobiles”. Hint: nrow().\nFill in the document with markdown commentary for each of the code chunks! A few notes go a long way towards improving the readability of the report.\n\n\n\nExploring chunk options\nGot lost in the demonstration? No problem, just open a new .Rmd file in RStudio via “File” -&gt; “New File” -&gt; “R Markdown…”, and just press “OK”, and resume!)\nJust like YAML is metadata for the Rmd document, code chunk options are metadata for the code chunk. Specify them within the {r} at the top of a code chunk, separated by commas. For a list of chunk options, check out Yihui Xie’s knitr book. Let’s try some:\n\nHide the code from the output with echo = FALSE.\nChange the figure width and height with fig.width = 5 and fig.height = 3.\nKnit the results. Can you spot the differences?\n\n\n\n\nYour turn: data update!\nIn the instructor demo, we prettied up a nice report about mtcars together. But suddenly, you receive an email from your collaborator who collected the mtcars data, who says that the data on Mazda RX4, the Valiant, and the Volvo 142E were transcribed wrong from the magazine! They’re going to work on correcting them, but in the mean time, they’d like to re-run the analysis with those three cars excluded.\nIn small groups, prepare an updated report by updating your .Rmd appropriately, then re-knitting it. Then discuss: in this case, how did using the RMarkdown workflow rather than copying and pasting R output to MS Word help prevent the creation of non-reproducible results?",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#attribution",
    "href": "webpages/lectures/lec2A_reproducibility.html#attribution",
    "title": "Lecture 2A: Reproducibility",
    "section": "Attribution",
    "text": "Attribution\nThanks to Icíar Fernández Boyano’s help in putting this demonstration together. Inspiration for activity ideas drawn from Nicholas Tierney’s R Markdown for Scientists book, the R Markdown for Medicine workshop materials, and the UBC MDS program.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1a_installation.html",
    "href": "webpages/lectures/lec1a_installation.html",
    "title": "Lecture 1A: Installation",
    "section": "",
    "text": "The goal of this lecture is to learn how to install and setup key software for use in the course.\nTAs are available in class on Imagine Day from 9am-10:30am on Tuesday September 2nd to aid with installation. I highly recommend you join if you haven’t used RStudio, Jupyter, or GitHub before.\n\n\nYou may encounter some material that implicitly assumes that you are using a Mac. For example, they might point you to a Terminal app, or ask you to use Unix commands like which or ls. Here is a cheatsheet that helps you convert between Windows command line (“DOS”) and Mac command line (“UNIX”). One thing that’s missing is the equivalent to Unix’s which; the closest equivalent in DOS is where.\n\n\n\nR and RStudio The main programming language used in the class is R and our main IDE (a text editor with helpful features for writing and running code) is RStudio. The following instructions are adapted from Chapter 5 of Jenny Bryan’s “happy git” book.\n\nInstall (or update to) the latest release R on your computer (4.5.1 currently):\n\nWindows: https://cran.r-project.org/bin/windows/base/\nMac: https://cran.r-project.org/bin/macosx/\n\nInstall RStudio\n\nhttps://posit.co/download/rstudio-desktop/\n\n\nEven if you already have R/RStudio, please update them to the most recent version!\n\n\n\nYou will need another IDE for R (Jupyter Notebook) and an R kernel called ‘IR Kernel’ (needed to run R code within Jupyter) to work on the autograded worksheets. This is because the autograder we use plays well with Jupyter.\nThe following instructions are adapted from Rich Pauloo.\nPC Installation:\n\nInstall Anaconda from https://www.anaconda.com/download\n\nProvide your email and an installation link will be sent to you\nInstall the full version of Anaconda (not miniconda)\n\nInstall and setup the IR Kernel\n\nFind the location of R.exe on your computer (the location probably looks like C:\\Program Files\\R\\R-4.5.1\\bin). If you can’t find it, launch Command Prompt (CMD) and execute where R. The output should be the path to the file R.exe.\nOpen the Anaconda Prompt application. Enter the following command into Anaconda Prompt: cd file_path_here where file_path_here is replaced with the location of the R.exe that you found.\nRun R from within Anaconda Prompt by entering in R.exe. This opens an R session inside Anaconda Prompt. From here, enter the following commands in this order:\n\ninstall.packages(\"IRkernel\")\nIR:kernel::installspec()\n\nIf prompted to select a IR kernel mirror, select 12 (CANADA - MB).\n\nTo verify that everything is working, open Anaconda Prompt and type jupyter lab. Jupyter Lab should launch and display both a Python and R kernel.\n\nHaving trouble? Check the instructions here: https://richpauloo.github.io/2018-05-16-Installing-the-R-kernel-in-Jupyter-Lab/.\nMac OS Installation:\n\nInstall Anaconda from https://www.anaconda.com/download\n\nProvide your email and an installation link will be sent to you\nInstall the full version of Anaconda (not miniconda)\n\nInstall and setup the IR Kernel\n\nOpen R and navigate to the Console (see below).\n\n\n\nYour console may have a different appearance! Mine’s in dark mode.\n\n\nInstall the necessary packages by entering\ninstall.packages(c(\"repr\", \"IRdisplay\", \"evaluate\", \"crayon\", \"pbdZMQ\", \"devtools\", \"uuid\", \"digest\"))\ndevtools::install_github(\"IRkernel/IRkernel\")\nExit RStudio.\n\nConfigure the IRkernel from within R\n\nIt’s important that these next commands are done from within the version of R that you want to link to Jupyter Lab (R version 5.4.1, for example)\nLaunch R (NOT RSTUDIO! This is typically found in /usr/bin/R. If you can’t find it, open the Terminal application and type in which R. This will provide you with the path to R. Then, open a Finder window and at the top of your screen hit Go -&gt; go to folder and paste everything in the path except R (i.e., /usr/bin/). Scroll through and find R and open it.\nIn the R application, run IRkernel::installspec()\nIf prompted to choose a IRkernel mirror, select 12 (Canada - MB).\n\nLaunch Anaconda, and open a Jupyter Lab and you should see an R kernel available.\n\nHaving trouble? Check out https://richpauloo.github.io/2018-05-16-Installing-the-R-kernel-in-Jupyter-Lab/.\n\n\n\nGit is a version control software. Github is a cloud-based platform (built on Git) for sharing code.\n\nRegister a Github account at github.com (if you don’t already have one).\n\nCreate a username that uses your actual name. Shorter is better! For example, mine is grcetmpk. See this for more information.\nYou don’t need to download any apps.\n\nInstall Git (more info here)\n\nSee if Git is already installed. For Mac OS, on the Terminal (Mac) type which git. For Windows, go to Command Prompt and type where git. If you get an error of git: command not found, you do not have git installed yet.\nWindows:\n\nInstall Git for Windows (https://gitforwindows.org/)\nWhen asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, keep the defaults.\n\nMac OS:\n\nInstall XCode Command Line Tools by opening Terminal and typing xcode-select --install (more info here)\nIn Terminal, enter git config. Click install.\n\n\nConfigure Git: In RStudio, navigate to the Terminal or Shell (see below).\n\n\n\nIf using Windows, you will have a Shell, not a Terminal.\n\n\nwithin the Terminal (Mac) or Shell (Windows) (Tools &gt; Terminal/Shell) do:\ngit config --global user.name \"your_github_username\"\ngit config --global user.email \"your_email_you_used_for_github@example.com\"\ngit config --global --list\n\nIf you are having issues, you could use the usethis package in R. See here.\n\nGet your Personal Access Token (PAT)\n\nOption 1: Go to to https://github.com/settings/tokens and click “Generate token”. Describe the token’s purpose in the Note field, e.g. “personal-macbook” or “Stat545Installation”. Select “repo”, “user”, and “workflow” for scopes. Save this token somewhere so you can use it again later, such as a password manager.\nOption 2: From R, execute usethis::create_github_token() (you may have to install the usethis package first by first running install.packages(\"usethis\")). Describe the token’s purpose in the Note field, e.g. “personal-macbook” or “stat545installation”.\n\nFrom R (in the console), run install.packages(\"gitcreds\") if you haven’t already.\nExecute gitcreds::gitcreds_set() and enter the PAT that you just made when prompted.",
    "crumbs": [
      "Lecture 1A: Installation"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1a_installation.html#software-and-troubleshooting",
    "href": "webpages/lectures/lec1a_installation.html#software-and-troubleshooting",
    "title": "Lecture 1A: Installation",
    "section": "",
    "text": "The goal of this lecture is to learn how to install and setup key software for use in the course.\nTAs are available in class on Imagine Day from 9am-10:30am on Tuesday September 2nd to aid with installation. I highly recommend you join if you haven’t used RStudio, Jupyter, or GitHub before.\n\n\nYou may encounter some material that implicitly assumes that you are using a Mac. For example, they might point you to a Terminal app, or ask you to use Unix commands like which or ls. Here is a cheatsheet that helps you convert between Windows command line (“DOS”) and Mac command line (“UNIX”). One thing that’s missing is the equivalent to Unix’s which; the closest equivalent in DOS is where.\n\n\n\nR and RStudio The main programming language used in the class is R and our main IDE (a text editor with helpful features for writing and running code) is RStudio. The following instructions are adapted from Chapter 5 of Jenny Bryan’s “happy git” book.\n\nInstall (or update to) the latest release R on your computer (4.5.1 currently):\n\nWindows: https://cran.r-project.org/bin/windows/base/\nMac: https://cran.r-project.org/bin/macosx/\n\nInstall RStudio\n\nhttps://posit.co/download/rstudio-desktop/\n\n\nEven if you already have R/RStudio, please update them to the most recent version!\n\n\n\nYou will need another IDE for R (Jupyter Notebook) and an R kernel called ‘IR Kernel’ (needed to run R code within Jupyter) to work on the autograded worksheets. This is because the autograder we use plays well with Jupyter.\nThe following instructions are adapted from Rich Pauloo.\nPC Installation:\n\nInstall Anaconda from https://www.anaconda.com/download\n\nProvide your email and an installation link will be sent to you\nInstall the full version of Anaconda (not miniconda)\n\nInstall and setup the IR Kernel\n\nFind the location of R.exe on your computer (the location probably looks like C:\\Program Files\\R\\R-4.5.1\\bin). If you can’t find it, launch Command Prompt (CMD) and execute where R. The output should be the path to the file R.exe.\nOpen the Anaconda Prompt application. Enter the following command into Anaconda Prompt: cd file_path_here where file_path_here is replaced with the location of the R.exe that you found.\nRun R from within Anaconda Prompt by entering in R.exe. This opens an R session inside Anaconda Prompt. From here, enter the following commands in this order:\n\ninstall.packages(\"IRkernel\")\nIR:kernel::installspec()\n\nIf prompted to select a IR kernel mirror, select 12 (CANADA - MB).\n\nTo verify that everything is working, open Anaconda Prompt and type jupyter lab. Jupyter Lab should launch and display both a Python and R kernel.\n\nHaving trouble? Check the instructions here: https://richpauloo.github.io/2018-05-16-Installing-the-R-kernel-in-Jupyter-Lab/.\nMac OS Installation:\n\nInstall Anaconda from https://www.anaconda.com/download\n\nProvide your email and an installation link will be sent to you\nInstall the full version of Anaconda (not miniconda)\n\nInstall and setup the IR Kernel\n\nOpen R and navigate to the Console (see below).\n\n\n\nYour console may have a different appearance! Mine’s in dark mode.\n\n\nInstall the necessary packages by entering\ninstall.packages(c(\"repr\", \"IRdisplay\", \"evaluate\", \"crayon\", \"pbdZMQ\", \"devtools\", \"uuid\", \"digest\"))\ndevtools::install_github(\"IRkernel/IRkernel\")\nExit RStudio.\n\nConfigure the IRkernel from within R\n\nIt’s important that these next commands are done from within the version of R that you want to link to Jupyter Lab (R version 5.4.1, for example)\nLaunch R (NOT RSTUDIO! This is typically found in /usr/bin/R. If you can’t find it, open the Terminal application and type in which R. This will provide you with the path to R. Then, open a Finder window and at the top of your screen hit Go -&gt; go to folder and paste everything in the path except R (i.e., /usr/bin/). Scroll through and find R and open it.\nIn the R application, run IRkernel::installspec()\nIf prompted to choose a IRkernel mirror, select 12 (Canada - MB).\n\nLaunch Anaconda, and open a Jupyter Lab and you should see an R kernel available.\n\nHaving trouble? Check out https://richpauloo.github.io/2018-05-16-Installing-the-R-kernel-in-Jupyter-Lab/.\n\n\n\nGit is a version control software. Github is a cloud-based platform (built on Git) for sharing code.\n\nRegister a Github account at github.com (if you don’t already have one).\n\nCreate a username that uses your actual name. Shorter is better! For example, mine is grcetmpk. See this for more information.\nYou don’t need to download any apps.\n\nInstall Git (more info here)\n\nSee if Git is already installed. For Mac OS, on the Terminal (Mac) type which git. For Windows, go to Command Prompt and type where git. If you get an error of git: command not found, you do not have git installed yet.\nWindows:\n\nInstall Git for Windows (https://gitforwindows.org/)\nWhen asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, keep the defaults.\n\nMac OS:\n\nInstall XCode Command Line Tools by opening Terminal and typing xcode-select --install (more info here)\nIn Terminal, enter git config. Click install.\n\n\nConfigure Git: In RStudio, navigate to the Terminal or Shell (see below).\n\n\n\nIf using Windows, you will have a Shell, not a Terminal.\n\n\nwithin the Terminal (Mac) or Shell (Windows) (Tools &gt; Terminal/Shell) do:\ngit config --global user.name \"your_github_username\"\ngit config --global user.email \"your_email_you_used_for_github@example.com\"\ngit config --global --list\n\nIf you are having issues, you could use the usethis package in R. See here.\n\nGet your Personal Access Token (PAT)\n\nOption 1: Go to to https://github.com/settings/tokens and click “Generate token”. Describe the token’s purpose in the Note field, e.g. “personal-macbook” or “Stat545Installation”. Select “repo”, “user”, and “workflow” for scopes. Save this token somewhere so you can use it again later, such as a password manager.\nOption 2: From R, execute usethis::create_github_token() (you may have to install the usethis package first by first running install.packages(\"usethis\")). Describe the token’s purpose in the Note field, e.g. “personal-macbook” or “stat545installation”.\n\nFrom R (in the console), run install.packages(\"gitcreds\") if you haven’t already.\nExecute gitcreds::gitcreds_set() and enter the PAT that you just made when prompted.",
    "crumbs": [
      "Lecture 1A: Installation"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1a_installation.html#attribution",
    "href": "webpages/lectures/lec1a_installation.html#attribution",
    "title": "Lecture 1A: Installation",
    "section": "Attribution",
    "text": "Attribution\nThank you to Vincenzo Coia and Jenny Bryan and previous STAT 545 instructors for these directions!",
    "crumbs": [
      "Lecture 1A: Installation"
    ]
  },
  {
    "objectID": "webpages/faq.html",
    "href": "webpages/faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "September - December of each academic year. Typical format: STAT 545A 1.5 credits in September through mid October, followed by STAT 545B 1.5 credits from mid October through early December."
  },
  {
    "objectID": "webpages/faq.html#when-is-the-course-offered",
    "href": "webpages/faq.html#when-is-the-course-offered",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "September - December of each academic year. Typical format: STAT 545A 1.5 credits in September through mid October, followed by STAT 545B 1.5 credits from mid October through early December."
  },
  {
    "objectID": "webpages/faq.html#what-happened-to-stat-547m",
    "href": "webpages/faq.html#what-happened-to-stat-547m",
    "title": "Frequently Asked Questions",
    "section": "What happened to STAT 547M?",
    "text": "What happened to STAT 547M?\nSTAT 547M became STAT 545B in 2020, so that the course codes align. Otherwise, these are the same courses."
  },
  {
    "objectID": "webpages/faq.html#what-happened-to-the-guidebook",
    "href": "webpages/faq.html#what-happened-to-the-guidebook",
    "title": "Frequently Asked Questions",
    "section": "What happened to the guidebook?",
    "text": "What happened to the guidebook?\nWe used a guidebook in 2019/2020. It’s still available at https://stat545guidebook.netlify.app, but had become deprecated in place of worksheets and some tutorials."
  },
  {
    "objectID": "webpages/faq.html#why-are-there-two-courses-instead-of-a-single-stat-545-course",
    "href": "webpages/faq.html#why-are-there-two-courses-instead-of-a-single-stat-545-course",
    "title": "Frequently Asked Questions",
    "section": "Why are there two courses, instead of a single “STAT 545” course?",
    "text": "Why are there two courses, instead of a single “STAT 545” course?\nFor several years, Jenny Bryan taught STAT 545A as a 1.5 credit course. She – and many students – felt there was a lot of great, relevant content that could go into an additional 1.5 credits.\nA full semester of data exploration, visualization, and all-around data wrangling was piloted in 2014/2015. It was structured as two half courses primarily so that several year’s worth of STAT 545A alums could register for the second part (then STAT 547M) and get the “missing half” of the course. And now it’s hard to break the cycle."
  },
  {
    "objectID": "webpages/faq.html#i-have-taken-stat-545a-for-1.5-credits-in-the-past.-can-i-take-stat-545b",
    "href": "webpages/faq.html#i-have-taken-stat-545a-for-1.5-credits-in-the-past.-can-i-take-stat-545b",
    "title": "Frequently Asked Questions",
    "section": "I have taken STAT 545A for 1.5 credits in the past. Can I take STAT 545B?",
    "text": "I have taken STAT 545A for 1.5 credits in the past. Can I take STAT 545B?\nYES. But STAT 545 keeps changing to keep current with the R world. It is your responsibility to level up."
  },
  {
    "objectID": "webpages/faq.html#can-i-just-take-the-second-half-i.e.-stat-545b",
    "href": "webpages/faq.html#can-i-just-take-the-second-half-i.e.-stat-545b",
    "title": "Frequently Asked Questions",
    "section": "Can I just take the second half, i.e. STAT 545B?",
    "text": "Can I just take the second half, i.e. STAT 545B?\nNO, not unless you have taken STAT 545A previously."
  },
  {
    "objectID": "webpages/faq.html#can-i-just-take-the-second-half-i.e.-stat-545b-ill-do-a-self-study-for-stat-545a.",
    "href": "webpages/faq.html#can-i-just-take-the-second-half-i.e.-stat-545b-ill-do-a-self-study-for-stat-545a.",
    "title": "Frequently Asked Questions",
    "section": "Can I just take the second half, i.e. STAT 545B? I’ll do a self-study for STAT 545A.",
    "text": "Can I just take the second half, i.e. STAT 545B? I’ll do a self-study for STAT 545A.\nUnfortunately, the answer is still no. As much as we’d want to say yes to you, it just becomes too difficult for us to evaluate your level without having seen deliverables for STAT 545A."
  },
  {
    "objectID": "webpages/faq.html#i-am-an-undergraduate.-can-i-take-this-course",
    "href": "webpages/faq.html#i-am-an-undergraduate.-can-i-take-this-course",
    "title": "Frequently Asked Questions",
    "section": "I am an undergraduate. Can I take this course?",
    "text": "I am an undergraduate. Can I take this course?\nMaybe, if there’s room. Contact the instructor."
  },
  {
    "objectID": "webpages/faq.html#what-if-ive-never-had-a-stats-class",
    "href": "webpages/faq.html#what-if-ive-never-had-a-stats-class",
    "title": "Frequently Asked Questions",
    "section": "What if I’ve never had a stats class?",
    "text": "What if I’ve never had a stats class?\nThere are no official pre-requisites for STAT 545A but most students will have had at least one prior statistics course or comparable experience."
  },
  {
    "objectID": "webpages/faq.html#im-not-enrolled-can-i-sit-in-during-class",
    "href": "webpages/faq.html#im-not-enrolled-can-i-sit-in-during-class",
    "title": "Frequently Asked Questions",
    "section": "I’m not enrolled – can I sit in during class?",
    "text": "I’m not enrolled – can I sit in during class?\nUnfortunately not. The room is usually at capacity, and further, we’ve allocated TA time for the specific number of students attending the class."
  },
  {
    "objectID": "webpages/faq.html#id-like-to-officially-audit-can-i",
    "href": "webpages/faq.html#id-like-to-officially-audit-can-i",
    "title": "Frequently Asked Questions",
    "section": "I’d like to officially audit – can I?",
    "text": "I’d like to officially audit – can I?\nAbsolutely! Please take a look at what is required of auditors so that you have an understanding of your expectations coming into the course; then, fill out the form (graduate version) and send it to the instructor to get signed."
  },
  {
    "objectID": "webpages/faq.html#the-course-is-full-can-i-audit-instead",
    "href": "webpages/faq.html#the-course-is-full-can-i-audit-instead",
    "title": "Frequently Asked Questions",
    "section": "The course is full – can I audit instead?",
    "text": "The course is full – can I audit instead?\nYou’ll still have to join the waitlist – auditing still counts as a seat in the class, so auditing is not a way around the course capacity.\nIn all cases, I encourage you to register! Or if the course is full, join the waitlist. Alternatively, you can engage in your own self-study using our online resources."
  },
  {
    "objectID": "webpages/faq.html#the-course-is-full.-is-there-a-chance-that-the-course-capacity-will-increase",
    "href": "webpages/faq.html#the-course-is-full.-is-there-a-chance-that-the-course-capacity-will-increase",
    "title": "Frequently Asked Questions",
    "section": "The course is full. Is there a chance that the course capacity will increase?",
    "text": "The course is full. Is there a chance that the course capacity will increase?\nUnfortunately, the course enrollment capacity will not increase. But, I encourage you to join the waitlist."
  },
  {
    "objectID": "webpages/faq.html#the-course-is-listed-as-restricted.-what-should-i-do",
    "href": "webpages/faq.html#the-course-is-listed-as-restricted.-what-should-i-do",
    "title": "Frequently Asked Questions",
    "section": "The course is listed as “restricted”. What should I do?",
    "text": "The course is listed as “restricted”. What should I do?\nWhen all the open seats are taken, the course is listed as “restricted”, as the remaining seats can only be taken by students of specific types. If you are a student of that type, then go ahead and register through SSC! Otherwise, I encourage you to join the waitlist."
  },
  {
    "objectID": "webpages/faq.html#can-i-take-this-course-if-im-not-a-statistics-student",
    "href": "webpages/faq.html#can-i-take-this-course-if-im-not-a-statistics-student",
    "title": "Frequently Asked Questions",
    "section": "Can I take this course if I’m not a Statistics student?",
    "text": "Can I take this course if I’m not a Statistics student?\nThis course is open to any graduate student at UBC. Students from other departments vastly outnumber those from Statistics. In fact, the most successful students are often grad students from other fields who need to analyze and visualize data for a thesis. They are highly motivated and excel.\nHowever, if you have never programmed or worked at the command line before, prepare for a shock. This will be a powerful, positive experience, but it’s a big adjustment. Come suffer through the worst part of the learning curve in good company!"
  },
  {
    "objectID": "webpages/faq.html#do-i-need-a-computer",
    "href": "webpages/faq.html#do-i-need-a-computer",
    "title": "Frequently Asked Questions",
    "section": "Do I need a computer?",
    "text": "Do I need a computer?\nYES. You absolutely must have access to a computer on which you can install software, download data, etc. In fact, class meetings will be a mix of lecture, discussion, and live coding. Students will get the most out of this if they can bring their own laptop to class every day. If this is not possible, we will try to help you work something out."
  },
  {
    "objectID": "webpages/faq.html#are-they-any-prerequisites",
    "href": "webpages/faq.html#are-they-any-prerequisites",
    "title": "Frequently Asked Questions",
    "section": "Are they any prerequisites?",
    "text": "Are they any prerequisites?\nThere are no official pre-requisites for STAT 545A, but most students will have had at least one prior statistics course or comparable experience.\nSTAT 545B requires STAT 545A."
  },
  {
    "objectID": "webpages/mda/mda_deliverable2.html#deliverable-2-will-be-due-on-wednesday-october-22nd-2025-at-1159pm-pt",
    "href": "webpages/mda/mda_deliverable2.html#deliverable-2-will-be-due-on-wednesday-october-22nd-2025-at-1159pm-pt",
    "title": "Mini Data Analysis: Deliverable 2",
    "section": "Deliverable 2 will be due on Wednesday October 22nd, 2025 at 11:59pm PT",
    "text": "Deliverable 2 will be due on Wednesday October 22nd, 2025 at 11:59pm PT",
    "crumbs": [
      "Mini Data Analysis: Deliverable 2"
    ]
  },
  {
    "objectID": "webpages/syllabus/syllabusA.html",
    "href": "webpages/syllabus/syllabusA.html",
    "title": "Syllabus: STAT 545 A (Part I)",
    "section": "",
    "text": "Acknowledgement\nUBC’s Point Grey Campus is located on the traditional, ancestral, and unceded territory of the xwməθkwəyəm (Musqueam) people. The land it is situated on has always been a place of learning for the Musqueam people, who for millennia have passed on their culture, history, and traditions from one generation to the next on this site.\n\n\nCourse Information\n\n\n\nCourse Title\nCourse Code Number\nCredit Value\n\n\nExploratory Data Analysis Part I\nSTAT 545 A\n1.5\n\n\n\n\n\nPrerequisites\nWhile there are no formal pre-requisites for STAT 545 A, students should be familiar with basic statistical analyses and have taken at least one introductory statistics course.\nSTAT545 A is a pre-requisite for STAT545 B. No exceptions.\n\n\nContact and Office Hours\n\n\n\n\n\n\n\n\n\nInstructor\nContact Details\nOffice Location\nOffice Hours\n\n\n\n\nGrace Tompkins\ngrace&lt;at&gt;stat.ubc.ca\nESB 3134\nTBD\n\n\n\n\n\n\nTeaching Assistants\n\n\n\n\nTBD\n\n\nTBD\n\n\nTBD\n\n\n\n\n\nCourse Structure\nThis course will feature short lectures and in-class demonstrations so students get hands-on experience with the help of their instructor and TAs. The class will be partially “flipped”, with students being expected to review a short video prior to the lecture. Dedicated time will be given in lecture for students to work through assigned worksheets.\nPlease bring a charged laptop to every class. If you do not have a personal laptop, one can be borrowed through the UBC library.\n\n\nSchedule of Topics\nSTAT 545 A (Part I):\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nIn-class work\n\n\n\n\n1\nTuesday Sept 2\nInstallation\n\n\n\n\nThursday Sept 4\nIntro to STAT545 and R\nWorksheet A1\n\n\n\n\n\n\n\n\n2\nTuesday Sept 9\nAuthoring and Reproducibility\nEnsure you have completed the installation instructions from Sept 2!\n\n\n\nThursday Sept 11\nVersion Control\n\n\n\n\n\n\n\n\n\n3\nTuesday Sept 16\nData Manipulation with dplyr\nWorksheet A2\n\n\n\nThursday Sept 18\n\nWorksheet A2\n\n\n\n\n\n\n\n\n4\nTuesday Sept 23\nData Visualization\nWorksheet A3\n\n\n\nThursday Sept 25\n\nWorksheet A3\n\n\n\n\n\n\n\n\n5\nTuesday Sept 30\nTidy Data\nWorksheet A4\n\n\n\nThursday Oct 2\n\nWorksheet A4\n\n\n\n\n\n\n\n\n6\nTuesday Oct 7\nModel Fitting\nWorksheet A4\n\n\n\nThursday Oct 9\nFactors and Dates\nWorksheet A5\n\n\n\n\n\n\n\n\n7\nTuesday Oct 14\nReading and Writing Data, Tibble Joins\nWorksheet A5\n\n\n\nThursday Oct 16\nReview and Work Session\nWorksheet A5, Mini Data Analysis (MDA)\n\n\n\nThis schedule is subject to change. Any changes will be announced via the #annoucements channel on Slack, and major changes will be sent out via email.\n\n\nAssessments\nThis course will have autograded, formative worksheets meant to guide you through a number of exercises.\n\n\n\n\n\n\n\n\nAssessment\nPercent Grade\nNote\n\n\n\n\nWorksheets\n20%\nGuided worksheets\n\n\nMini Data Analysis\n45%\nStudents write their own mini analysis\n\n\nCollaborative Project\n35%\nTeam project intended for practicing version control and collaboration\n\n\n\n\nWorksheets\nWorksheets are interactive assignments that allow students to get real-time feedback on their code. Your grade will be based on the number of correct answers provided. There are unlimited attempts for the worksheets, and time will be given in class to work through them.\nWorksheets are produced with Jupyter Notebooks, and will be submitted on Canvas.\n\n\n\nWorksheet\nRelease Date\nDue Date (11:59PM PT)\n\n\n\n\nWorksheet A1\nSeptember 2nd, 2025\nNA\n\n\nWorksheet A2\nSeptember 15th, 2025\nSeptember 22nd, 2025\n\n\nWorksheet A3\nSeptember 22nd, 2025\nSeptember 29th, 2025\n\n\nWorksheet A4\nSeptember 29th, 2025\nOctober 13th, 2025\n\n\nWorksheet A5\nOctober 13th, 2025\nOctober 20th, 2025\n\n\n\n\n\nCollaborative Project\nTeams will be randomly assigned. The idea behind the collaborative project is to practice using Version Control and collaborative tools on Github, troubleshoot broken R code, and rewrite code to address issues. There will be two deliverables for the project:\n\n\n\n\n\n\n\n\nCollaborative Project Milestone\nRelease Date\nDue Date (11:59pm PT)\n\n\n\n\nDeliverable 1 (100 points)\nSeptember 4th, 2025\nSeptember 19th, 2025\n\n\nDeliverable 2 (78 points)\nSeptember 4th, 2025\nSeptember 26th, 2025\n\n\n\nInstructions will be posted on the Course Website under “Collaborative Project”\n\n\nMini Data Analysis\nConduct your own mini data analysis! The goal of this assignment is to become more familiar with R and generate a reproducible report using RMarkdown and various packages, such as tibble. There are two equally weighted deliverables:\n\n\n\n\n\n\n\n\nMini Data Analysis Milestone\nRelease Date\nDue Date (11:59PM PT)\n\n\n\n\nDeliverable 1 (36 points)\nSeptember 26th, 2025\nOctober 3rd, 2025\n\n\nDeliverable 2 (36 points)\nSeptember 26th, 2025\nOctober 22nd, 2025\n\n\n\n\n\n\nAuditing Students\nAuditing students are expected to complete all assessments (see above). All assessments are graded on a pass/fail basis for those officially auditing.\nYou must be registered as an auditing student to attend lectures due to capacity limitations.\n\n\nCourse Communications\nWe will be using Slack as our primary platform of all course-related communications! Students will be emailed an invite to their class’ Slack workspace.\nOfficial course communications will occur on the #announcements channel. You will receive an invite on the first day of classes. Please notify the instructor by email if you have not received your personal invite.\nOur STAT 545 team will be actively monitoring Slack during regular working hours (9am to 5pm PT, Monday to Friday). You are free to ask questions outside of this window but please keep in mind that there are no expectations for the team to answer questions outside of working hours or on weekends or holidays.\nTo make the most out of Slack, please\n\nUse the #general channel for clarifications, asking about course organization, or clarifying instructions. Things you post on the #general channel will be seen by everyone, so please do not provide information that gives away answers to assignments.\nMake a group chat with our TAs when you need more personalized help, or have an issue with grading. They may direct you to the #general channel when appropriate, or direct you to the instructor.\nDirect message the instructor if there is a concern that is more personal (i.e., you need to self declare an absense) or if you have already talked to the TAs about an issue and are unsatisfied. You can also direct message the instructor if you are having issues with a group member in any group-related assignments.\nPost in the #random channel if you find things related to the course that you’d like to share\n\n\n\nPrivacy\nSlack and GitHub are hosted on servers stored outside of Canada. Please keep this in mind.\n\n\nPolicies\n\nRegrade Requests\nRegrade requests must be sent to the TAs through Slack within one week of the assessment being returned. If required, regrade requests can be escalated to the instructor only if the request has already been brought up to the TA team and the student is unsatisfied. The instructor reserves the right to regrade the entire assessment, resulting in a higher or lower mark than originally provided.\n\n\nLate Policies\nWorksheets (and larger assignments, if applicable) are due at 11:59pm PT on the date indicated in the course schedule. For a late submission, a 24 hour extension will be provided for the first offense. Late submissions will be given a grade of 0 for subsequent occurrences.\nThere is a zero-tolerance policy for late projects, including the mini data analysis and the collaborative project. If you are having issues with a team member regarding any group work, reach out to the instructor directly through Slack or email.\n\n\nAcademic Concession\nUBC no longer requires a doctor’s note (or supporting documentation) for academic concession. A self-declaration will suffice – here is a template you can use. The form is also posted on our Canvas page. Please submit this to the instructor via email.\nExamples of “conflicting responsibility” are conference travel and time-sensitive field work.\nIf you arrange to have an assignment submitted late, you may not be able to receive feedback from your peers.\n\n\nPlagiarism\nPlagiarism, which is intellectual theft, occurs where an individual submits or presents the oral or written work of another person as his or her own and can include:\n\nmultiple students submitting the same response\ncopying from sources without citing them\ncopying verbatim (word-for-word) from source and citing, but failing to make it explicit that this is a quotation (quotations should be used only rarely, if at all)\n\nStudents are responsible for ensuring that any work submitted does not constitute plagiarism. Students who are in any doubt as to what constitutes plagiarism should consult their instructor before handing in any assignments.\nFor more information see the UBC Academic Misconduct policies.\n\n\nCode Plagiarism\nStudents must correctly cite any code that has been authored by someone else or by the student themselves for other assignments. Cases of code plagiarism may include, but are not limited to:\n\nthe reproduction (copying and pasting) of code with none or minimal reformatting (e.g., changing the name of the variables)\nthe translation of an algorithm or a script from a language to another\nthe generation of code by automatic code-generations software\n\nAn “adequate acknowledgement” requires a detailed identification of the (parts of the) code reused and a full citation of the original source code that has been reused.\n\n\nUBC’s Policies and Resources to Support Student Success\nUBC provides resources to support student learning and to maintain healthy lifestyles but recognizes that sometimes crises arise and so there are additional resources to access including those for survivors of sexual violence. UBC values respect for the person and ideas of all members of the academic community. Harassment and discrimination are not tolerated nor is suppression of academic freedom. UBC provides appropriate accommodation for students with disabilities and for religious, spiritual and cultural observances. UBC values academic honesty and students are expected to acknowledge the ideas generated by others and to uphold the highest academic standards in all of their actions. Details of the policies and how to access support are available here.\n\n\nYour personal health\nIf you’re sick, it’s important that you stay home – no matter what you think you may be sick with (e.g., cold, flu, other). Your precautions will help reduce risk and keep everyone safer. The structure of this class is intended to provide flexibility so that you can prioritize your health and still be able to succeed.\nIf you do miss class because of illness:\n\nConsult the class resources on the course website\nCome to office hours on Zoom.\nUse Slack to carry out discussions.\n\nIf you miss an assessment due to illness, see the above section on Academic Concessions, and review the UBC policy here: http://www.calendar.ubc.ca/vancouver/index.cfm?tree=3,329,0,0\n\n\nInstructor health\nIf I am ill, then I will not come to class. If that happens, here’s what you can expect:\n\nIf I am well enough to teach, I will conduct virtual lectures through Zoom until I am well. If this happens, you will be tagged in an announcement via Slack with information. You can anticipate that this would very likely be a last minute announcement. Our classroom will still be available for you to sit and attend an online session, although it is recommended that you bring headphones.\nIf I am not well enough to teach, it is possible that one or more teaching assistants will take my place. But if not, we will either try to make up for lost time, make new resources to aid in your learning, or make accommodations regarding the assessments.\n\n\n\n\nCopyright\nCourse materials are licensed under Creative Commons 4.0.",
    "crumbs": [
      "Syllabus: STAT 545 A (Part I)"
    ]
  },
  {
    "objectID": "webpages/collabproj/collabproj_deliverable2.html",
    "href": "webpages/collabproj/collabproj_deliverable2.html",
    "title": "Collaborative Project: Deliverable 2",
    "section": "",
    "text": "Due September 26th, 2025 at 11:59pm PT",
    "crumbs": [
      "Collaborative Project: Deliverable 2"
    ]
  },
  {
    "objectID": "webpages/worksheets.html",
    "href": "webpages/worksheets.html",
    "title": "Worksheets",
    "section": "",
    "text": "Links to worksheets go here"
  },
  {
    "objectID": "webpages/collabproj/collabproj_deliverable1.html",
    "href": "webpages/collabproj/collabproj_deliverable1.html",
    "title": "Collaborative Project: Deliverable 1",
    "section": "",
    "text": "Due September 19th, 2025 at 11:59pm PT",
    "crumbs": [
      "Collaborative Project: Deliverable 1"
    ]
  },
  {
    "objectID": "webpages/syllabus/syllabusB.html",
    "href": "webpages/syllabus/syllabusB.html",
    "title": "Syllabus: STAT 545 B (Part II)",
    "section": "",
    "text": "Syllabus goes here",
    "crumbs": [
      "Syllabus: STAT 545 B (Part II)"
    ]
  },
  {
    "objectID": "webpages/mda/mda_deliverable1.html#deliverable-1-will-be-due-on-friday-october-3rd-2025-at-1159pm-pt.",
    "href": "webpages/mda/mda_deliverable1.html#deliverable-1-will-be-due-on-friday-october-3rd-2025-at-1159pm-pt.",
    "title": "Mini Data Analysis: Deliverable 1",
    "section": "Deliverable 1 will be due on Friday October 3rd, 2025 at 11:59pm PT.",
    "text": "Deliverable 1 will be due on Friday October 3rd, 2025 at 11:59pm PT.",
    "crumbs": [
      "Mini Data Analysis: Deliverable 1"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html",
    "href": "webpages/lectures/lec2b_versioncontrol.html",
    "title": "Lecture 2B: Version Control",
    "section": "",
    "text": "From today’s topic, students are anticipated to be able to:\n\nuse git on their own computer (locally).\nconnect between a local git repository and that repository on GitHub, using RStudio.\nmake commits in git using RStudio.\nmake a branch in git using RStudio or GitHub.\nuse collaborative GitHub features such as Issues and pull requests.\n\nAfter this class, you should be able to start working on your Collaborative Project.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#learning-objectives",
    "href": "webpages/lectures/lec2b_versioncontrol.html#learning-objectives",
    "title": "Lecture 2B: Version Control",
    "section": "",
    "text": "From today’s topic, students are anticipated to be able to:\n\nuse git on their own computer (locally).\nconnect between a local git repository and that repository on GitHub, using RStudio.\nmake commits in git using RStudio.\nmake a branch in git using RStudio or GitHub.\nuse collaborative GitHub features such as Issues and pull requests.\n\nAfter this class, you should be able to start working on your Collaborative Project.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#resources",
    "href": "webpages/lectures/lec2b_versioncontrol.html#resources",
    "title": "Lecture 2B: Version Control",
    "section": "Resources",
    "text": "Resources\nToday’s class is a digest of the following resources:\n\nVideo lecture STAT 545 Episode 2-A: Git and GitHub for an Organized Project\nOnline tutorials:\n\nThe basic version control workflow (without branching): Happy git w R: Chapter 20.\nStarting with GitHub: Chapter 15: New project, GitHub first\nStarting with files on your computer, and didn’t set up git: Chapter 16: Existing project, GitHub first\nStarting with files on your computer, and did set up git: Chapter 17: Existing project, GitHub Last\n\n\nSome additional resources that you might find useful:\n\nRead the Understanding the GitHub flow to get a sense of branching.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-get-acquainted-with-github",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-get-acquainted-with-github",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: Get Acquainted with GitHub",
    "text": "Instructor demo: Get Acquainted with GitHub\n\nRepositories, Organizations, and Personal Accounts\nA repository stores files and the history of the files; the usual convention is to use a single repository to organize a single project.\nGitHub is a place where repositories can live online. Being online provides us a way to share and collaborate on projects. It also serves as a backup for your project.\nExample 1: Grace’s GitHub page\nExample 1: The STAT 545 webpage\nThe first repository lives under Grace’s personal Github account. The second repository lives under the UBC-STAT organization. Organizations are useful if you have lots of different projects with a common theme which lots of people are collaborating on.\n\n\nUseful Github tips for the course\n\nAll of your projects in this class will live in the STAT 545 @ UBC Organization.\nWhen you watch a Github repo, you get notifications when things happen in them. So if you “Watch” the STAT 545 webpage repo, then you will get email notifications when I update the site!\nThe Issues page on a Github repo is a forum where Github users can bring up issues related to the repository. Our commmunication guidelines suggest that you post an Issue on your homework repo if you have concerns about your grade.\n\n\n\nUseful Github tips for the course\n\nAll of your projects in this class will live in the STAT 545 @ UBC Organization.\nWhen you watch a Github repo, you get notifications when things happen in them. So if you “Watch” the STAT 545 webpage repo, then you will get email notifications when I update the site!\nThe Issues page on a Github repo is a forum where Github users can bring up issues related to the repository. Our commmunication guidelines suggest that you post an Issue on your homework repo if you have concerns about your grade.\n\n\n\nYour turn: working on Github\nTry making your own Github repository and editing it on Github! (This exercise is slightly adapted from Data Carpentries.)\n\nGo to your GitHub profile. Eg. Mine is https://github.com/katieburak.\nCreate a new GitHub repository by clicking the + symbol in the top bar and using the dropdown menu to create a new repository.\nName your repository stat-545-demo-YOUR-NAME. In the description write “STAT 545 Demo”. Check the box for initializing the repository for adding a README file.\nYou are now redirected to the repository main page. The repository page tells you you have 1 commit. Click on it to get to the history page. This tells you all the changes that have been tracked for the files in the repository so far.\nGo back to your repository main page. Click on README.md, then click “edit this file”. Add the following information into the README.md file:\n\nYour name\nWhat kind of scientist do you tell people you are at dinner parties?\n\nCommit your changes: click the commit changes button, and briefly summarize the changes you’ve made in the Commit message.\nCheck out the Github commit history again. Has anything changed?",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-working-locally-and-synchronizing-with-github",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-working-locally-and-synchronizing-with-github",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: working locally, and synchronizing with Github",
    "text": "Instructor demo: working locally, and synchronizing with Github\nWe will go through the Data Carpentries tutorial for this together. This demonstrates how to keep and work on the project files in a local repository on your machine, and how to keep it in synch with a remote Github repository.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-merge-conflicts",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-merge-conflicts",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: merge conflicts",
    "text": "Instructor demo: merge conflicts\nMerge conflicts happen when we’ve created multiple versions of files that can’t be obviously combined into one definitive version.\nHere is an example of something that would not cause a merge conflict:\n\nAt 9am, my TA pulls from the STAT 545 repository, makes a local change to the course dashboard, and commits and pushes her changes.\nAt 10am, I forget to pull from the STAT 545 repository, and start working on the Day 1 notes locally.\nWhen I commit and push, Git is a bit confused, because I wasn’t working off of the “freshest” version of the STAT 545 repository - but since my TA and I were working on different lines of code, it will fairly seamlessly figure out that the right thing to do is to add my changes to the Day 1 notes to the current version of the STAT 545 repository online.\n\nHere is an example of something that WOULD cause a merge conflict:\n\nAt 9am, my TA and I both pull from the STAT 545 repository.\nAt 10am, my TA changes the front page to say “STAT 555 @ UBC”, and commits/pushes those changes.\nAt 11am, I change the front page (without pulling!!!) to say “STAT 777 @ UBC”.\nWhen I commit and push, Git doesn’t know what to do. Should it make the version that says “STAT 555 @ UBC” or “STAT 777 @ UBC” the definitive version? The push will fail, and Git will tell us we need to fix the conflict and then commit the result.\n\nHow do we fix this?\n\nPull.\nOpen the file that caused the merge conflict. You should see something like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nSTAT 555 @ UBC\n=======\nSTAT 777 @ UBC\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 526363991d21ed20e7e0c57b5e99d944ac5ce5aa\n\nThe stuff below the &lt;&lt;&lt;&lt;&lt;&lt;&lt; and above the ======= is what was in your local version; the stuff above the &gt;&gt;&gt;&gt;&gt;&gt;&gt; and below the ======= is what was in the remote conflicting version. Decide what you want to have on the offending line (e.g. “STAT 555 @ UBC”), and replace the whole block of text above with that.\nSave and commit the file. (An informative message here might be “Fixing a merge conflict.”) You should now be able to successfully push!\n\n\nYour turn: Branching, merging, and pull requests\nFind a partner. In this exercise, we will learn how to have different team members save their work separately on branches, and how to merge those changes to the main project branch.\n\nTeammate A adds Teammate B to their stat545-demo repository as a collaborator. (Go to Settings from the main repo page, then Access =&gt; Collaborators). This should send Teammate B an email with a collaboration invitation; accept that invitation.\nTeammate B clones Teammate A’s stat545-demo repository.\nOn their own computer, Teammate B will make a new branch in Teammate A’s stat545-demo repository. You can do this either on Github by clicking on “1 branch” on the repo homepage then the green “New branch” button, or on your own computer in R Studio with the “New Branch” button.\nOn their own computer, Teammate B will create a new file in the newly created branch, then commit and push it.\nTeammate B will start a pull request (basically a request to merge content onto the main branch) on GitHub, by going to “Pull Requests” -&gt; “New Pull Request”, and selecting the branch you intend to merge to the main branch. In this pull request, include a comment and title indicating (at a high level) what the change made is about.\nTeammate A will follow the instructions here to merge the pull request.\n\nToo easy? Then either switch roles, or try creating a pull request that causes a merge conflict and resolving it!",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1b_introR.html",
    "href": "webpages/lectures/lec1b_introR.html",
    "title": "Lecture 1B: Course Introduction and R",
    "section": "",
    "text": "For today’s lecture, we are going to go through the some important information related to the course and jump right into some coding in R using an interactive worksheet and Jupyter Notebooks.\n\n\nWe will be using various technologies throughout this course which you should familiarize yourself with. The main platforms we’ll be using are;\n\nThe course website (this one!),\nCanvas (for submitting assignments),\nSlack (for communications),\nRStudio (for writing R code),\nGitHub (for version control and collaboration), and\nJupyter notebooks (for interactive worksheets).\n\nIf you’ve never used some of these before, that’s absolutely OK. This course is made to guide you through the basics of many of these platforms.\n\n\n\nAll of the important information is in the syllabus, which you can navigate to at the top of this page. There are a few items I’d like to emphasize:\n\nSTAT 545 A has frequent worksheets. These are graded based on completion. For example, if you complete all 15 questions, you will score 100% for that worksheet. Complete 14/15? You’ll get a 93%. They are relatively straight forward and will guide you through the topics we talked about that week.\nEveryone gets one “pass” for a late worksheet. After the first occurrence, a 0 will be awarded for any late worksheet.\nSTAT 545 A has a mini data analysis and collaborative project worth most of your marks. These are not graded on the basis of how sophisticated your statistical analysis is, but on the quality of your code and workflow. A grading rubric will be posted for each.\nThere is a zero tolerance policy for late projects and analyses.\nStay home if you’re sick. Fill out an Academic Concession Self Declaration form (linked on Canvas) if you miss an assessment due to illness. Accommodations will be given on a case-by-case basis.\nBring a charged laptop to class!\nAll communications are to be done on Slack - do not email me questions unless they are of a sensitive nature (i.e., an academic concession form).\nDon’t plagiarize code or assessments.\n\nBut please - read the syllabus :)\n\n\n\nLectures for STAT545 are designed to be more interactive than a traditional statistics lecture. The class will begin with a short summary of the previous class, followed by an introduction to that day’s topic. For most of the lectures, we will be going through the interactive worksheets (yes, the ones that you receive marks for and yes, prior to the deadline). This will give provide you with dedicated time to work on the assessments in class with access to the instructor and the TAs.\nLectures build on top of each other and it is crucial to stay on track as we progress through this course.\nAnd remember, your participation in the course is valuable for your final grade! iClicker questions will be given during each lecture. Correctly answer at least one to receive full marks for that lecture’s participation. iClicker questions are worth 5% of your overall grade (see Syllabus for more details).",
    "crumbs": [
      "Lecture 1B: Course Introduction and R"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1b_introR.html#welcome-to-stat545",
    "href": "webpages/lectures/lec1b_introR.html#welcome-to-stat545",
    "title": "Lecture 1B: Course Introduction and R",
    "section": "",
    "text": "For today’s lecture, we are going to go through the some important information related to the course and jump right into some coding in R using an interactive worksheet and Jupyter Notebooks.\n\n\nWe will be using various technologies throughout this course which you should familiarize yourself with. The main platforms we’ll be using are;\n\nThe course website (this one!),\nCanvas (for submitting assignments),\nSlack (for communications),\nRStudio (for writing R code),\nGitHub (for version control and collaboration), and\nJupyter notebooks (for interactive worksheets).\n\nIf you’ve never used some of these before, that’s absolutely OK. This course is made to guide you through the basics of many of these platforms.\n\n\n\nAll of the important information is in the syllabus, which you can navigate to at the top of this page. There are a few items I’d like to emphasize:\n\nSTAT 545 A has frequent worksheets. These are graded based on completion. For example, if you complete all 15 questions, you will score 100% for that worksheet. Complete 14/15? You’ll get a 93%. They are relatively straight forward and will guide you through the topics we talked about that week.\nEveryone gets one “pass” for a late worksheet. After the first occurrence, a 0 will be awarded for any late worksheet.\nSTAT 545 A has a mini data analysis and collaborative project worth most of your marks. These are not graded on the basis of how sophisticated your statistical analysis is, but on the quality of your code and workflow. A grading rubric will be posted for each.\nThere is a zero tolerance policy for late projects and analyses.\nStay home if you’re sick. Fill out an Academic Concession Self Declaration form (linked on Canvas) if you miss an assessment due to illness. Accommodations will be given on a case-by-case basis.\nBring a charged laptop to class!\nAll communications are to be done on Slack - do not email me questions unless they are of a sensitive nature (i.e., an academic concession form).\nDon’t plagiarize code or assessments.\n\nBut please - read the syllabus :)\n\n\n\nLectures for STAT545 are designed to be more interactive than a traditional statistics lecture. The class will begin with a short summary of the previous class, followed by an introduction to that day’s topic. For most of the lectures, we will be going through the interactive worksheets (yes, the ones that you receive marks for and yes, prior to the deadline). This will give provide you with dedicated time to work on the assessments in class with access to the instructor and the TAs.\nLectures build on top of each other and it is crucial to stay on track as we progress through this course.\nAnd remember, your participation in the course is valuable for your final grade! iClicker questions will be given during each lecture. Correctly answer at least one to receive full marks for that lecture’s participation. iClicker questions are worth 5% of your overall grade (see Syllabus for more details).",
    "crumbs": [
      "Lecture 1B: Course Introduction and R"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1b_introR.html#coding-in-r-the-basics",
    "href": "webpages/lectures/lec1b_introR.html#coding-in-r-the-basics",
    "title": "Lecture 1B: Course Introduction and R",
    "section": "Coding in R: The Basics",
    "text": "Coding in R: The Basics\nLet’s get started! By this point, I’m assuming you’ve successfully installed R, RStudio, Github, and Jupyter notebooks. If you haven’t, check out the previous lecture for a guide to setting up this software.\nBefore diving into the worksheet, let’s talk about R. R is an open source programming language designed for statistical computing and data analysis. It is a commonly used programming language alongside Python and SAS, which we will not be covering in this course.\n\nCalculations\nIn its simplest form, R is a calculator. For example, we can type 1 + 2 in the console of R (we will be using RStudio) will spit out the answer of 3.\n\n1 + 2\n\n[1] 3\n\n\nThe [1] in the answer can be ignored for now.\nR can also be used to do more complex expressions, such as \\((450 - 15)^2/(5 + 7\\times4)\\), which we would write in R with:\n\n(450-15)^2/(5+7*4)\n\n[1] 5734.091\n\n\n\n\nVariables\nR can also be used to store values as a variable. To assign a value to a variable in R, we use the &lt;- symbol (the less than symbol followed by the minus sign). For example, if I wanted to store the number of apartments I’ve lived in since moving out for university, I could assign this to a variable called apartments_lived_in by:\n\napartments_lived_in &lt;- 4\n\nThen, if I later wanted to use this value, I could simply execute\n\napartments_lived_in\n\n[1] 4\n\n\nwhich you can see stores the value of 4! I can also do math on this variable, for example multiplying it by 2:\n\napartments_lived_in*2\n\n[1] 8\n\n\nVariables can also store the results of expressions, which we will dive into in Worksheet 1.\n\n\nData Structures\nR isn’t just a calculator. R can handle different data structures (which are just objects that contain data) including strings, vectors, and data frames (just to name a few). We will go over the basics of these structures in this section.\n\nStrings\nA string is a R (often called character data) is a string of characters enclosed in quotations. For example, I could store my name in a variable called name:\n\nname &lt;- \"Grace\"\n\nand access it later by typing name\n\nname\n\n[1] \"Grace\"\n\n\nStrings can also have write space, such as\n\nmanifestation &lt;- \"I'm a great R coder!\"\nmanifestation\n\n[1] \"I'm a great R coder!\"\n\n\nYou can use single ' or double \" quotation marks to wrap around the string - just be consistent!\n\n\n\n\n\n\nTip\n\n\n\nIn some worksheets, questions are multiple choice. Ensure that you type your answer as a string, i.e., my_answer &lt;- \"A\".\n\n\n\n\nNumeric Vectors\nA vector is an ordered list of items of the same type. A numeric vector is an ordered list of numbers.\nVectors are created in R using the c() function, with elements separated by commas. For example, suppose someone wanted to store the number of roommates they lived with in their four apartments. They had 4 roommates in their first apartment, then 2 in their next, followed by 3, and finally lived alone with 0 roommates. We can save this information in a vector named roommates using the following code:\n\nroommates &lt;- c(4, 2, 3, 0)\n\nTo see the contents of a vector, simply type its name in the console and run the code\n\nroommates\n\n[1] 4 2 3 0\n\n\nWe can access each element of the vector by indexing it with []. In R, unlike some other programming languages, the index starts at 1. So if you’d like to access the first element of the vector, you can use [1]. For example, to see the number of roommates in my first apartment, I could use\n\nroommates[1]\n\n[1] 4\n\n\nOr view the number of roommates in my third apartment using:\n\nroommates[3]\n\n[1] 3\n\n\nWe can also perform functions on vectors! Suppose we wanted to calculate the total number of occupants in each apartment (including myself). I need to add one person to each apartment! To do so, I can make a new variable called totaloccupants which is equal to roommates plus one:\n\ntotaloccupants &lt;- roommates + 1\ntotaloccupants\n\n[1] 5 3 4 1\n\n\nWe will dive more into functions on vectors in Worksheet 1.\n\n\nLogical Vectors\nA logical vector is a vector where the elements are a logical statement containing TRUE or FALSE. Let’s see how we can create a vector indicating whether or not there were more than two roommates in a given apartment. We can store this as a variable, named more_than_two_roommates using\n\nmore_than_two_roommates &lt;- roommates &gt; 2\nmore_than_two_roommates\n\n[1]  TRUE FALSE  TRUE FALSE\n\n\nFrom the output, you can see that this statement is true for apartments 1 and 3, indicating there were more than two roommates for these apartments.\n\n\nOther useful functions on vectors\nR has a number of built in functions that are useful for exploring vectors. We can check the length (number of elements) of a vector using the length() function:\n\nlength(roommates)\n\n[1] 4\n\n\nThis answer makes sense as we had data for four apartments. We can also look at the types of data stored in vectors using the typeof function\n\ntypeof(roommates)\n\n[1] \"double\"\n\ntypeof(totaloccupants)\n\n[1] \"double\"\n\ntypeof(more_than_two_roommates)\n\n[1] \"logical\"\n\n\ndouble is a type of numeric data. logical is the type of data that stores TRUE/FALSE.\n\n\nDataframes\nDataframes are a powerful tool for storing multidimensional data. For example, we could have data on housing for multiple people, including the rent paid, number of roommates, city, etc. Dataframes are a convenient way to store such information. Suppose we have data on three individuals stored in the dataframe housingdata. To access it, type housingdata in the R Console.\n\nhousingdata\n\n   Name NumRooms NumOccupants Rent      City\n1 Grace        2            2 2700 Vancouver\n2   Mei        3            4 5000   Toronto\n3   Sam        1            1 1900   Halifax\n\n\nWe see that Grace rents a 2 bedroom apartment, with two total occupants, and the total rent is $2700 per month in Vancouver. Mei lives in Toronto and has a 3 bedroom apartment shared between 4 people, and the total rent is $5000. Sam lives alone in a one bedroom apartment in Halifax, and pays $1900.\nWe will focus more on dataframes in a coming lecture, but I wanted to mention them here.",
    "crumbs": [
      "Lecture 1B: Course Introduction and R"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1b_introR.html#worksheet-a1",
    "href": "webpages/lectures/lec1b_introR.html#worksheet-a1",
    "title": "Lecture 1B: Course Introduction and R",
    "section": "Worksheet A1",
    "text": "Worksheet A1\nNow it’s your turn to use R! Work through Worksheet A1 on your own and reach out on Slack if you have any issues. Refer to the previous lecture if you need guidance on how to access Worksheets on Jupyter Notebooks.\n\n\n\n\n\n\nNote\n\n\n\nWorksheet A1 is NOT going to be graded. However, I highly recommend going through it to practice using Jupyter Notebooks and to get a handle on R. Future worksheets will be graded.",
    "crumbs": [
      "Lecture 1B: Course Introduction and R"
    ]
  },
  {
    "objectID": "webpages/lectures/lec1b_introR.html#what-to-do-when-youre-stuck",
    "href": "webpages/lectures/lec1b_introR.html#what-to-do-when-youre-stuck",
    "title": "Lecture 1B: Course Introduction and R",
    "section": "What to do when you’re stuck",
    "text": "What to do when you’re stuck\nWorking with technology can be hard. Coding can be especially hard. Getting stuck is very common in both cases.\nBefore running to Slack, try searching for the answer yourself. This is an extremely important real-world skill! When you’re conducting your own analyses down the road, you may not have anyone to directly ask for help.\nTry:\n\nGoogling your error codes (removing highly specific information like variable names)\nGoogling the problem (i.e., R dataframe can’t rename columns)\nSearch stackoverflow and include the [r] tag. Or the [ggplot2] tag. Or the [plyr] tag. You get the idea.\n\n\n\n\n\n\n\nCaution\n\n\n\nBeware of AI tools: sometimes they’re helpful, and sometimes they’re not.\n\n\nWhile I encourage you to search for answers on your own, don’t fret if you’re stuck. We’re here to help on Slack! Review the posting guidelines on the Syllabus so your questions go to the appropriate channel.",
    "crumbs": [
      "Lecture 1B: Course Introduction and R"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html",
    "href": "webpages/lectures/lec3_dplyr.html",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "",
    "text": "From this topic, students are anticipated to be able to:\n\nUse the five core dplyr verbs for data wrangling: select(), filter(), arrange(), mutate(), summarise().\nUse piping when implementing function chains.\nUse group_by() to operate within groups (of rows) with mutate() and summarise().\nUse across() to operate on multiple columns with summarise() and mutate().\n\nWe will spend two classes on this topic.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#learning-objectives",
    "href": "webpages/lectures/lec3_dplyr.html#learning-objectives",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "",
    "text": "From this topic, students are anticipated to be able to:\n\nUse the five core dplyr verbs for data wrangling: select(), filter(), arrange(), mutate(), summarise().\nUse piping when implementing function chains.\nUse group_by() to operate within groups (of rows) with mutate() and summarise().\nUse across() to operate on multiple columns with summarise() and mutate().\n\nWe will spend two classes on this topic.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#resources",
    "href": "webpages/lectures/lec3_dplyr.html#resources",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "Resources",
    "text": "Resources\n\nVideo lecture: dplyr Part 1: Basic Data Manipulation\nVideo lecture: dplyr Part 2: Calculations on tibbles\nChapter 6 and Chapter 7 of Jenny Bryan’s STAT 545 book follows along with what we will be covering in Day 1 and Day 2 of this topic (although you won’t find the across() function).\n“R for Data Science” is another great resource for learning data wrangling. Take a look at:\ndplyr’s introductory vignette is useful for orienting you to the package.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#why-data-manipulation",
    "href": "webpages/lectures/lec3_dplyr.html#why-data-manipulation",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "Why Data Manipulation?",
    "text": "Why Data Manipulation?\nYou have a shiny new data set - great! You might be tempted to dive right in and start making pretty graphs and fitting cool models to your data. Not so fast! In practice, it’s very rare that you have the data in the exact right form to make the graph you want, or fit the model you want. You will need to start by manipulating your data into the right form: creating new variables, subsetting rows, renaming columns, etc.\nPlus, an important piece of data analysis output is tables that summarize the data in some way. For example, it is extremely standard practice in biomedical and public health studies to have the first table of any journal article summarize basic characteristics of the study population, possibly stratified by exposure. While these tables are less pretty than graphs, they can nevertheless be very insightful!\nAn even less exciting but perhaps even more important part of data analysis is simply checking the data for things like:\n\nPossible inconsistencies with your understanding of what the data set should contain\nPossible errors\nBasic info gathering: number of rows, number of columns, amount of missing data, etc.\n\nAll of these require data manipulation. We choose to use the dplyr (pronounced d-plier) package for this.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#tibbles",
    "href": "webpages/lectures/lec3_dplyr.html#tibbles",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "Tibbles",
    "text": "Tibbles\nAs mentioned in Lecture 1A, data frames are useful tools for storing data. You can think of it as a spreadsheet of information, but in R. A tibble is a modern version of a basic data frame. To use tibbles, we first install the tibble package (if we haven’t already) and load it into R by:\n\n# install.packages(\"tibble\") # remove comment if not already installed\nlibrary(tibble)\n\nTibbles typically said to be more user friendly than standard R dataframes, and are easily used with tidyverse functions. More on that in a bit!\nWe can either load in pre-existing data frames (like from a .csv file or an R package), or create a tibble manually using the tibble() function. For example, we could use\n\ntibble(x = letters)\n\n# A tibble: 26 × 1\n   x    \n   &lt;chr&gt;\n 1 a    \n 2 b    \n 3 c    \n 4 d    \n 5 e    \n 6 f    \n 7 g    \n 8 h    \n 9 i    \n10 j    \n# ℹ 16 more rows\n\n\nto have a single column tibble of letters of the alphabet, or\n\nhousingdata &lt;- tibble(name = c(\"Grace\", \"Mei\", \"Steven\", \"Phuong\", \"Omar\", \"Richa\", \"Bruce\", \"David\"), \n                      numrooms = c(2, 3, 1, 4, 2, 1, 3, 2), \n                      rent_2024 = c(2665, 4900, 2900, 4950, 2400, 1000, 2800, 2350),\n                      rent_2025 = c(2700, 5000, 2900, 5000, 2500, 1000, 2800, 2400),\n                      city = c(\"Vancouver\", \"Toronto\", \"Halifax\", \"Vancouver\", \"Montreal\", \"Victoria\", \"Halifax\", \"Vancouver\"))\nhousingdata\n\n# A tibble: 8 × 5\n  name   numrooms rent_2024 rent_2025 city     \n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1 Grace         2      2665      2700 Vancouver\n2 Mei           3      4900      5000 Toronto  \n3 Steven        1      2900      2900 Halifax  \n4 Phuong        4      4950      5000 Vancouver\n5 Omar          2      2400      2500 Montreal \n6 Richa         1      1000      1000 Victoria \n7 Bruce         3      2800      2800 Halifax  \n8 David         2      2350      2400 Vancouver\n\n\nWe can see that the tibble can store different data types (here we have both numeric data (“dbl” is short for double) and character data (“chr” is short for character).\nWe can also change an R data frame to a dibble. For example, the mtcars data set is available in the datasets package in R as a dataframe. We can load it as a tibble using:\n\nlibrary(datasets)\ntibble(mtcars)\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#dplyr-functions",
    "href": "webpages/lectures/lec3_dplyr.html#dplyr-functions",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "dplyr Functions",
    "text": "dplyr Functions\nTo use the dplyr functions, we need to install (if necessary) and load the dplyr package:\n\n# install.packages(\"dplyr\") #remove comment if not installed yet\nlibrary(dplyr)\n\nOnce loaded, we will have a number of new tools at our disposal. Here are a few functions we are going to review in this lecture:\n\nselect(): keep or remove certain columns\n\n\nSubsetting with select()\nselect() allows you to keep or remove columns. For example, in the housingdata dataset, say we only want the columns name and city. We use the select function where the first argument is the name of the tibble, and the other arguments are the names of the columns we wish to keep:\n\nselect(housingdata, name, city)\n\n# A tibble: 8 × 2\n  name   city     \n  &lt;chr&gt;  &lt;chr&gt;    \n1 Grace  Vancouver\n2 Mei    Toronto  \n3 Steven Halifax  \n4 Phuong Vancouver\n5 Omar   Montreal \n6 Richa  Victoria \n7 Bruce  Halifax  \n8 David  Vancouver\n\n\nNow, this didn’t alter the original data frame! If we wanted to save this reduced dataframe, we can name it to a new variable, such as\n\nhousingdata2 &lt;- select(housingdata, name, city)\nhousingdata2\n\n# A tibble: 8 × 2\n  name   city     \n  &lt;chr&gt;  &lt;chr&gt;    \n1 Grace  Vancouver\n2 Mei    Toronto  \n3 Steven Halifax  \n4 Phuong Vancouver\n5 Omar   Montreal \n6 Richa  Victoria \n7 Bruce  Halifax  \n8 David  Vancouver\n\n\nNow, housingdata2 contains only the rows we were interested in keeping, without overriding the original housingdata tibble. We can see that housingdata still contains all of the information from the original data set.\n\nhousingdata\n\n# A tibble: 8 × 5\n  name   numrooms rent_2024 rent_2025 city     \n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1 Grace         2      2665      2700 Vancouver\n2 Mei           3      4900      5000 Toronto  \n3 Steven        1      2900      2900 Halifax  \n4 Phuong        4      4950      5000 Vancouver\n5 Omar          2      2400      2500 Montreal \n6 Richa         1      1000      1000 Victoria \n7 Bruce         3      2800      2800 Halifax  \n8 David         2      2350      2400 Vancouver\n\n\nWe can also use select() to indicate which columns to remove. For example, if I wanted all variables except name in my data set, I could do:\n\nselect(housingdata, -name)\n\n# A tibble: 8 × 4\n  numrooms rent_2024 rent_2025 city     \n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1        2      2665      2700 Vancouver\n2        3      4900      5000 Toronto  \n3        1      2900      2900 Halifax  \n4        4      4950      5000 Vancouver\n5        2      2400      2500 Montreal \n6        1      1000      1000 Victoria \n7        3      2800      2800 Halifax  \n8        2      2350      2400 Vancouver\n\n\n\n\nSubsetting with filter()\nThe filter() function allows you to specify which rows to keep in the tibble. The filter() function takes conditional statements and allows us to remove or keep rows based on these conditions.\nFor example, let’s say we wanted to keep only data where the rent in 2025 (rent_2025) is strictly larger than 2500. Then, we could use:\n\nfilter(housingdata, rent_2025 &gt; 2500)\n\n# A tibble: 5 × 5\n  name   numrooms rent_2024 rent_2025 city     \n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1 Grace         2      2665      2700 Vancouver\n2 Mei           3      4900      5000 Toronto  \n3 Steven        1      2900      2900 Halifax  \n4 Phuong        4      4950      5000 Vancouver\n5 Bruce         3      2800      2800 Halifax  \n\n\nNow, only rows with rent_2025 &gt; 2500 are kept in the data frame.\nWe can also use the == sign to indicate that something is equivalent. For example, we may only be interested in observations in Vancouver. To do so, we can use:\n\nfilter(housingdata, city == \"Vancouver\")\n\n# A tibble: 3 × 5\n  name   numrooms rent_2024 rent_2025 city     \n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1 Grace         2      2665      2700 Vancouver\n2 Phuong        4      4950      5000 Vancouver\n3 David         2      2350      2400 Vancouver\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe double == in the statement to indicate “is equal to”! Further, as the variable of interest is a string (or character type), we need to use quotations around the city name “Vancouver”.\n\n\nWe can also filter on multiple variables at the same time, even if they are different types. for example:\n\nfilter(housingdata, rent_2025 &gt; 2500, city == \"Vancouver\")\n\n# A tibble: 2 × 5\n  name   numrooms rent_2024 rent_2025 city     \n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1 Grace         2      2665      2700 Vancouver\n2 Phuong        4      4950      5000 Vancouver\n\n\n\n\nLeveling Up with tidyselect()\nSometimes we will want to select columns that have something in common with their name. This is particularly useful when the number of columns is large (for example, think if we had historical rent data for many years). To do so, we can use helper functions in the tidyverse library. First, install (if necessary) and load in the tidyverse library\n\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nLet’s use the starts_with() function to select all columns that relate to rents. We can do this by:\n\nselect(housingdata, starts_with(\"rent\"))\n\n# A tibble: 8 × 2\n  rent_2024 rent_2025\n      &lt;dbl&gt;     &lt;dbl&gt;\n1      2665      2700\n2      4900      5000\n3      2900      2900\n4      4950      5000\n5      2400      2500\n6      1000      1000\n7      2800      2800\n8      2350      2400\n\n\nThis code returned a tibble where only the columns involving rents are included! Other useful helper functions include:\n\nstarts_with() finds variables that start with the given input\nends_with() finds variables that end with the given input\ncontains() finds variables that have the given input at any location in the name\n\nWhile for the example data set we are really only selecting two columns, using these functions allows your code to be more flexible as data may be added later for more years of rent, for example.\n\n\nCreating New Variables with mutate()\nSometimes we need to create another variable or column based on information already present in a tibble. For example, suppose we are interested in the cost per room, rather than total rent, in our data. We can create a new variable that is the rent divided by the number of rooms using mutate():\n\nmutate(housingdata, rent_per_room_2025 = rent_2025/numrooms)\n\n# A tibble: 8 × 6\n  name   numrooms rent_2024 rent_2025 city      rent_per_room_2025\n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 Grace         2      2665      2700 Vancouver              1350 \n2 Mei           3      4900      5000 Toronto                1667.\n3 Steven        1      2900      2900 Halifax                2900 \n4 Phuong        4      4950      5000 Vancouver              1250 \n5 Omar          2      2400      2500 Montreal               1250 \n6 Richa         1      1000      1000 Victoria               1000 \n7 Bruce         3      2800      2800 Halifax                 933.\n8 David         2      2350      2400 Vancouver              1200 \n\n\nWe can also clean this up by rounding our new variable to two decimal places using the round() function:\n\nmutate(housingdata, rent_per_room_2025 = round(rent_2025/numrooms,2))\n\n# A tibble: 8 × 6\n  name   numrooms rent_2024 rent_2025 city      rent_per_room_2025\n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1 Grace         2      2665      2700 Vancouver              1350 \n2 Mei           3      4900      5000 Toronto                1667.\n3 Steven        1      2900      2900 Halifax                2900 \n4 Phuong        4      4950      5000 Vancouver              1250 \n5 Omar          2      2400      2500 Montreal               1250 \n6 Richa         1      1000      1000 Victoria               1000 \n7 Bruce         3      2800      2800 Halifax                 933.\n8 David         2      2350      2400 Vancouver              1200 \n\n\nAs we can see, the mutate() function took the data as the first argument, and then we listed the new variable name rent_per_room_2025 which we calculated by taking the rent in 2025 (rent_2025) and dividing it by the number of rooms in the house (numrooms). We wrapped round( x, 2) around the calculation to clean up the answer to two decimal places.\n\n\nThe Pipe Operator %&gt;%\nThe pipe operator (%&gt;%) is a convenient way to form a chain of commands on a tibble to perform multiple tasks at once.\nLet’s assume we want to modify a tibble using both select() and filter(). We can do so in one single line of code using the pipe operator. But for now, let’s start simple and use just one function using %&gt;%.\nLet’s say we want to subset our data and select only the rent and city columns on a tibble. We could use:\n\nselect(housingdata, starts_with(\"rent\"), city)\n\n# A tibble: 8 × 3\n  rent_2024 rent_2025 city     \n      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1      2665      2700 Vancouver\n2      4900      5000 Toronto  \n3      2900      2900 Halifax  \n4      4950      5000 Vancouver\n5      2400      2500 Montreal \n6      1000      1000 Victoria \n7      2800      2800 Halifax  \n8      2350      2400 Vancouver\n\n\nwhich is a perfectly valid answer. However, we could also use the pipe operator, as:\n\nhousingdata %&gt;%\n  select(starts_with(\"rent\"), city)\n\n# A tibble: 8 × 3\n  rent_2024 rent_2025 city     \n      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    \n1      2665      2700 Vancouver\n2      4900      5000 Toronto  \n3      2900      2900 Halifax  \n4      4950      5000 Vancouver\n5      2400      2500 Montreal \n6      1000      1000 Victoria \n7      2800      2800 Halifax  \n8      2350      2400 Vancouver\n\n\nHere, we tell dplyr the tibble we want to transform (housingdata), and then use the pipe operator (%&gt;%) to tell dplyr what functions we want to perform on it.\n\n\n\n\n\n\nNote\n\n\n\nWhen using the pipe operator, we no longer need to include the dataframe in the first argument of the function. Compare the previous two code chunks to see what I mean.\n\n\nWhile it may not be obvious from this first example why the pipe operator is commonly used, let’s consider that we want to\n\nfilter on rents for 2025 above $2500\nselect all columns aside from name\ncreate a new variable for the rent per room in 2025 (rounded to 2 decimal places)\nreorder the rows by descending order of 2025 rents\n\nThe arrange() function can change the order of rows.\narrange(desc(column_name)) will arrange the roms in descending order for the column_name given. See more here!\n\n\nTo do all of these tasks, the pipe operator allows us to write clear and readable code:\n\nhousingdata %&gt;% \n  filter(rent_2025 &gt; 2500) %&gt;%\n  select(-name) %&gt;%\n  mutate(rent_per_room_2025 = round(rent_2025/numrooms,2)) %&gt;%\n  arrange(desc(rent_2025))\n\n# A tibble: 5 × 5\n  numrooms rent_2024 rent_2025 city      rent_per_room_2025\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1        3      4900      5000 Toronto                1667.\n2        4      4950      5000 Vancouver              1250 \n3        1      2900      2900 Halifax                2900 \n4        3      2800      2800 Halifax                 933.\n5        2      2665      2700 Vancouver              1350 \n\n\n\n\n\n\n\n\nNote\n\n\n\nAfter each function call, we need to include the pipe operator to tell dplyr that we’re not done yet, and the chain of commands continues on the next line.\n\n\nAnother thing to note is that the pipe operator creates a new tibble and does not alter the original. So, housingdata still contains all of the original rows and columns in its unaltered form. If we wanted to alter it (or save the output to a new variable), we need to assign it using &lt;-. For example, the following code will overwrite the original tibble:\n\nhousingdata &lt;- housingdata %&gt;% \n    filter(rent_2025 &gt; 2500) %&gt;%\n    select(-name) %&gt;%\n    mutate(rent_per_room_2025 = round(rent_2025/numrooms,2)) %&gt;%\n    arrange(desc(rent_2025))\n\nhousingdata\n\n# A tibble: 5 × 5\n  numrooms rent_2024 rent_2025 city      rent_per_room_2025\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1        3      4900      5000 Toronto                1667.\n2        4      4950      5000 Vancouver              1250 \n3        1      2900      2900 Halifax                2900 \n4        3      2800      2800 Halifax                 933.\n5        2      2665      2700 Vancouver              1350",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#try-it-yourself",
    "href": "webpages/lectures/lec3_dplyr.html#try-it-yourself",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "Try it Yourself!",
    "text": "Try it Yourself!\nWe think the best way to learn the basics of dplyr is to work through Worksheet A2.\n\nHaven’t attempted all of the questions on Worksheet A2? Then spend this time completing the worksheet.\nFinished attempting all of the questions? Then do the optional R4DS Data Transformation reading, and maybe even do some of the exercises for extra practice.\n\nPut any questions you have about the worksheet questions or about data manipulation in Slack.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec3_dplyr.html#next-class-fev-case-study",
    "href": "webpages/lectures/lec3_dplyr.html#next-class-fev-case-study",
    "title": "Lecture 3: Data Manipulation with dplyr",
    "section": "Next Class: FEV Case Study",
    "text": "Next Class: FEV Case Study\nNext class we will be working through a case study centred on a biomedical data set.\nBy yourself or in small groups, work through the exercises in the case study. The teaching team will walk around and answer questions and chat about anything data manipulation related.\nWe will conclude class by going over instructor solutions.",
    "crumbs": [
      "Lecture 3: Data Manipulation with dplyr"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html",
    "href": "webpages/lectures/lec4_datavis.html",
    "title": "Lecture 4: Data Visualization",
    "section": "",
    "text": "From this topic, students are anticipated to be able to:\n\nIdentify the seven components of the grammar of graphics underlying ggplot2.\nProduce plots with ggplot2 by implementing the components of the grammar of graphics.\nCustomize the look of ggplot2 graphs.\nChoose an appropriate plot type for Exploratory Data Analysis, based on an understanding of what makes a graph effective.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#learning-objectives",
    "href": "webpages/lectures/lec4_datavis.html#learning-objectives",
    "title": "Lecture 4: Data Visualization",
    "section": "",
    "text": "From this topic, students are anticipated to be able to:\n\nIdentify the seven components of the grammar of graphics underlying ggplot2.\nProduce plots with ggplot2 by implementing the components of the grammar of graphics.\nCustomize the look of ggplot2 graphs.\nChoose an appropriate plot type for Exploratory Data Analysis, based on an understanding of what makes a graph effective.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#resources",
    "href": "webpages/lectures/lec4_datavis.html#resources",
    "title": "Lecture 4: Data Visualization",
    "section": "Resources",
    "text": "Resources\nVideo lectures for this topic (ignore the episode numbering):\n\nVideo Lecture: ggplot2 Part 1: Introduction to Plotting\nVideo Lecture: ggplot2 Part 2: Plotting for Exploratory Data Analysis\nThe R4DS Data Visualization chapter (provides an excellent overview of plotting in ggplot2 and the grammar of graphics. We especially recommend sections 3.1 to 3.4.)\nHadley Wickham’s ggplot2 book (a well-organized, approachable, and comprehensive coverage of ggplot2.)\nCheatsheets:\n\nThe ggplot2 cheatsheet (Also available through RStudio: “Help” -&gt; “Cheatsheets” -&gt; “Data visualization with ggplot2”).\nR Cookbook Graphs\n\nCraig Hutton’s comprehensive blog post adopting a similar structure to our course notes, but with more explorations.\nResources about producing effective visualizations:\n\nFundamentals of Data Visualization by Claus Wilke is an excellent guide to designing effective visuals. If you only look at one resource, this should be it.\nVisualization Analysis and Design by Tamara Munzner is a gold-standard book for the theory of designing plots with a focus on human perception.\nBite-sized resources to help you produce effective visualizations:\n\nThe “do’s and don’ts of effective graphics” in Jenny Bryan’s STAT 545 book provides some rules of thumb for producing effective visuals.\nVincenzo’s “Communicating data” slides provide some rules of thumb.\nCallingbull.org’s entry on visualizations, by Carl T. Bergstrom and Jevin West, goes over several examples of improving ineffective visuals.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#plots-and-data-visualization",
    "href": "webpages/lectures/lec4_datavis.html#plots-and-data-visualization",
    "title": "Lecture 4: Data Visualization",
    "section": "Plots and Data Visualization",
    "text": "Plots and Data Visualization\nPlots and other forms of data visualization are powerful tools for conveying complex relationships. While tables can be useful, data visualizations are often preferred to aid with identify patterns and relationships and emphasizing important findings in a research projects. This is especially true for presentations, where the audience may not have time to digest a large table of numbers.\nJenny Bryan’s Challenger Example (https://speakerdeck.com/jennybc/ggplot2-tutorial) is a great example of why we may want to visualize data.\nIf you’ve learned about data visualization in R before, you’ve likely produced plots using “base R” methods (for example, the boxplot() function in R. It is a simple framework for making plots and is often “enough” for producing basic plots. In this lecture, we are going to dive into ggplot2, a package R users often use to make more sophisticated plots! If you’ve never used R to plot before, don’t worry. We aren’t assuming you have any experience with either method of plotting in R.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#ggplot2-and-the-grammar-of-graphics",
    "href": "webpages/lectures/lec4_datavis.html#ggplot2-and-the-grammar-of-graphics",
    "title": "Lecture 4: Data Visualization",
    "section": "ggplot2 and the Grammar of Graphics",
    "text": "ggplot2 and the Grammar of Graphics\nIf you’ve learned about data visualization in R before, you’ve likely produced plots using “base R” methods (for example, the boxplot() function in R. It is a simple framework for making plots and is often “enough” for producing basic plots. In this lecture, we are going to dive into ggplot2, a package R users often use to make more sophisticated plots! If you’ve never used R to plot before, don’t worry. We aren’t assuming you have any experience with either method of plotting in R.\nWe will be utilising the ggplot2 and tidyverse packages throughout this lecture. To load them:\n\n# install.packages(\"tidyverse\") #uncomment if not already installed\n# install.packages(\"ggplot2\") #uncomment if not already installed\n\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nggplot2 is based on the grammar of graphics, which is a systematic approach for describing different components or aspects of a graph. It involves seven components (required components are indicated with the *):\n\nData*\n\nthe data you’re feeding into the plot, perhaps a tibble or dataframe\n\nAesthetic mappings*\n\na specification of how you will connect variables (for example, horizontal or vertical positioning, grouping, size, colour, shape)\n\nGeometric objects*\n\na specification of what the object will be drawn as (for example, a scatter plot, line, bar chart)\n\nScales\n\na specification of how a variable is mapped to its aesthetic\n\nStatistical transformations\n\na specification of whether and how the data are combined or transformed. For example, is a bar chart plotting the values or a relative frequency?\n\nCoordinate system\n\na specification of how the position aesthetics (x and y) are depicted in the plot. We typically use cartesian coordinates, though polar coordinates are also possible.\n\nFacet\n\na specification of data variables that partition the data into smaller “sub plots” or panels\n\n\nIt’s okay if you don’t quite understand all of these components yet. We will walk through examples of commonly used plots and discuss which components are necessary!\n\nExample: Scatterplot\nTo build our first ggplot, we will use the gapminder data from the gapminder package. To install and load it, we use:\n\n# install.packages(\"gapminder\") #uncomment if not already installed\nlibrary(gapminder)\ndata(gapminder) \n\nhead(gapminder) #view first few rows of the tibble\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\nThe ggplot() function takes two arguments: data (the data frame or tibble containing your data that you’d like to plot) and mapping (aesthetic mappings applied to the entire plot. We use the aes() function inside of this argument.).\nLet’s start building the scatterplot! Let’s plot gdpPercap on the x axis and lifeExp on the y axis:\n\nggplot(gapminder, aes(x = gdpPercap, lifeExp))\n\n\n\n\n\n\n\n\nNotice that we haven’t actually plotted anything! ggplot doesn’t know what type of plot we want to draw, only that we want gpdPercap on the x axis and lifeExp on the y axis from the gapminder data we provided. To tell ggplot that we want a scatterplot, we are going to add a layer to the plot using the + at the end of the previous line. geom_point() is the geometric object we’d like to add (i.e., a scatterplot):\n\nggplot(gapminder, aes(x = gdpPercap, lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWe now have created a scatterplot! However, it’s a bit dense and difficult to see. We can specify an alpha transparency value within the geom_point() function to change the opacity:\n\nggplot(gapminder, aes(x = gdpPercap, lifeExp)) +\n  geom_point(alpha = 0.2)\n\n\n\n\n\n\n\n\nThat’s already looking better! We can really tell now where there are a lot of observations.\nNow, let’s transform the scale of the x axis to see if there is a more linear relationship between life expectancy and the log transformation of GDP per capita. The transformation will be of the form scale_AES_TRANSFORMATION() where AES corresponds to which aesthetic value is being transformed, and the TRANSFORMATION is the transformation being completed (here it will be log10. We can also rename the x axis using the first argument. We also can change the labels on the x axis to be dollar format. Let’s add another layer to do so:\n\nggplot(gapminder, aes(x = gdpPercap, lifeExp)) +\n  geom_point(alpha = 0.2) + \n  scale_x_log10(\"GDP per capita (log-scale)\", labels = scales::dollar_format())\n\n\n\n\n\n\n\n\nThe more translucent grey points are still a bit hard to see. Let’s change the background to a more minimalist theme using a theme() layer. While we’re at it, let’s also rename the y axis using a ylab() later:\n\nggplot(gapminder, aes(x = gdpPercap, lifeExp)) +\n  geom_point(alpha = 0.2) + \n  scale_x_log10(\"GDP per capita (log-scale)\", labels = scales::dollar_format()) +\n  theme_minimal() +\n  ylab(\"Life Expectancy (Years)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNames of axes should have quotations “” around them.\nThe order of the layers doesn’t matter after the geom_layer() layer.\n\n\n\n\nCommon Types of Plots\n\ngeom_point(): scatterplot\ngeom_line(): line plot\ngeom_bar(): bar chart\ngeom_histogram(): histogram\ngeom_boxplot(): box plot\ngeom_smooth(): adds a smooth trend line (various methods)\n\n\n\nAdvice for ggplot\nGoogle is absolutely your friend when building ggplots. I don’t think I’ve ever made a plot without googling how to do it. ggplot is extremely powerful, flexible, and a bit scary to learn! If you need to build a plot, search it! Need to plot two histograms, separated by groups (say, gender), side by side? I’d google: “ggplot histogram grouped by variable”. This brings me to this blog post by R Charts that has a TON of different side by side histograms with code! ggplot is very much a “learn by doing” skill.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#try-it-yourself",
    "href": "webpages/lectures/lec4_datavis.html#try-it-yourself",
    "title": "Lecture 4: Data Visualization",
    "section": "Try it Yourself:",
    "text": "Try it Yourself:\nWe think the best way to learn the basics of ggplot2 is to work through Worksheet A3.\n\nRemainder of this class:\n\nSpend time working through Worksheet 3.\nFinished attempting all of the questions? Then do the optional R4DS Data Visualization reading, and maybe even do some of the exercises for extra practice.\n\nPost any questions you have on the Slack channel!",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#next-class-fev-case-study",
    "href": "webpages/lectures/lec4_datavis.html#next-class-fev-case-study",
    "title": "Lecture 4: Data Visualization",
    "section": "Next class: FEV Case Study",
    "text": "Next class: FEV Case Study\nWe will get a flavour for how you might use ggplot2 in the wild and get in even more practice by working through a continuation of our FEV case study from last week.\nBy yourself and in small groups, work through the exercises in the case study. We will also discuss instructor answers to each exercise.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2A_reproducibility.html#resources",
    "href": "webpages/lectures/lec2A_reproducibility.html#resources",
    "title": "Lecture 2A: Reproducibility",
    "section": "Resources",
    "text": "Resources\nHere are a number of resources that may help supplement you with today’s lesson:\n\nSTAT 545 Episode 3-A: Reproducible Reports with R Markdown Some additional resources that you might find useful:\nThe Official R Markdown Tutorial from the “Introduction” up to and including the “Inline Code” section.\nR Markdown cheat sheet\n\n\n\n\n\n\n\nTip\n\n\n\nMany cheat sheets can be found from RStudio: go to “Help” -&gt; “Cheatsheets”.",
    "crumbs": [
      "Lecture 2A: Reproducibility"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#additional-resources",
    "href": "webpages/lectures/lec4_datavis.html#additional-resources",
    "title": "Lecture 4: Data Visualization",
    "section": "Additional Resources",
    "text": "Additional Resources\nVideo lectures for this topic (ignore the episode numbering):\n\nVideo Lecture: ggplot2 Part 1: Introduction to Plotting\nVideo Lecture: ggplot2 Part 2: Plotting for Exploratory Data Analysis\nThe R4DS Data Visualization chapter (provides an excellent overview of plotting in ggplot2 and the grammar of graphics. We especially recommend sections 3.1 to 3.4.)\nHadley Wickham’s ggplot2 book (a well-organized, approachable, and comprehensive coverage of ggplot2.)\nCheatsheets:\n\nThe ggplot2 cheatsheet (Also available through RStudio: “Help” -&gt; “Cheatsheets” -&gt; “Data visualization with ggplot2”).\nR Cookbook Graphs\n\nCraig Hutton’s comprehensive blog post adopting a similar structure to our course notes, but with more explorations.\nResources about producing effective visualizations:\n\nFundamentals of Data Visualization by Claus Wilke is an excellent guide to designing effective visuals. If you only look at one resource, this should be it.\nVisualization Analysis and Design by Tamara Munzner is a gold-standard book for the theory of designing plots with a focus on human perception.\nBite-sized resources to help you produce effective visualizations:\n\nThe “do’s and don’ts of effective graphics” in Jenny Bryan’s STAT 545 book provides some rules of thumb for producing effective visuals.\nVincenzo’s “Communicating data” slides provide some rules of thumb.\nCallingbull.org’s entry on visualizations, by Carl T. Bergstrom and Jevin West, goes over several examples of improving ineffective visuals.",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  },
  {
    "objectID": "webpages/lectures/lec4_datavis.html#effective-data-visualization",
    "href": "webpages/lectures/lec4_datavis.html#effective-data-visualization",
    "title": "Lecture 4: Data Visualization",
    "section": "Effective Data Visualization",
    "text": "Effective Data Visualization\nPlots and other forms of data visualization are powerful tools for conveying complex relationships. While tables can be useful, data visualizations are often preferred to aid with identify patterns and relationships and emphasizing important findings in a research projects. This is especially true for presentations, where the audience may not have time to digest a large table of numbers. Jenny Bryan’s Challenger Example (https://speakerdeck.com/jennybc/ggplot2-tutorial) is a great example of why we may want to visualize data.\nNow the question is, what visualization should you use to convey an idea? Well, you need to first formulate the question you want the data visualization to answer. That is, you need to figure out what you want to convey before you start visualizing the data. From UBC’s A First Introduction to Data Science [1] book:\n\n\n\n\n\n\n“A good visualization will clearly answer your question without distraction; a great visualization will suggest even what the question was itself without additional explanation. Imagine your visualization as part of a poster presentation for a project; even if you aren’t standing at the poster explaining things, an effective visualization will convey your message to the audience.” [1]\n\n\n\nWe need to convey the message using a data visualization while removing as much unnecessary information as possible. Below is a direct quote from the A First Introduction to Data Science [1] containing their suggestions for effective data visualizations:\n“Convey the message”\n\nMake sure the visualization answers the question you have asked most simply and plainly as possible.\nUse legends and labels so that your visualization is understandable without reading the surrounding text.\nEnsure the text, symbols, lines, etc., on your visualization are big enough to be easily read.\nEnsure the data are clearly visible; don’t hide the shape/distribution of the data behind other objects (e.g., a bar).ß\nMake sure to use color schemes that are understandable by those with colorblindness (a surprisingly large fraction of the overall population—from about 1% to 10%, depending on sex and ancestry [2]). For example, ColorBrewer and the RColorBrewer R package (Neuwirth 2014) provide the ability to pick such color schemes, and you can check your visualizations after you have created them by uploading to online tools such as a color blindness simulator.\nRedundancy can be helpful; sometimes conveying the same message in multiple ways reinforces it for the audience.\n\n“Minimize noise”\n\nUse colors sparingly. Too many different colors can be distracting, create false patterns, and detract from the message.\nBe wary of overplotting. Overplotting is when marks that represent the data overlap, and is problematic as it prevents you from seeing how many data points are represented in areas of the visualization where this occurs. If your plot has too many dots or lines and starts to look like a mess, you need to do something different.\nOnly make the plot area (where the dots, lines, bars are) as big as needed. Simple plots can be made small.\nDon’t adjust the axes to zoom in on small differences. If the difference is small, show that it’s small!",
    "crumbs": [
      "Lecture 4: Data Visualization"
    ]
  }
]