[
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html",
    "href": "webpages/lectures/lec2b_versioncontrol.html",
    "title": "Lecture 2B: Version Control",
    "section": "",
    "text": "From today’s topic, students are anticipated to be able to:\n\nuse git on their own computer (locally).\nconnect between a local git repository and that repository on GitHub, using RStudio.\nmake commits in git using RStudio.\nmake a branch in git using RStudio or GitHub.\nuse collaborative GitHub features such as Issues and pull requests.\n\nAfter this class, you should be able to start working on your Collaborative Project.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#learning-objectives",
    "href": "webpages/lectures/lec2b_versioncontrol.html#learning-objectives",
    "title": "Lecture 2B: Version Control",
    "section": "",
    "text": "From today’s topic, students are anticipated to be able to:\n\nuse git on their own computer (locally).\nconnect between a local git repository and that repository on GitHub, using RStudio.\nmake commits in git using RStudio.\nmake a branch in git using RStudio or GitHub.\nuse collaborative GitHub features such as Issues and pull requests.\n\nAfter this class, you should be able to start working on your Collaborative Project.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#resources",
    "href": "webpages/lectures/lec2b_versioncontrol.html#resources",
    "title": "Lecture 2B: Version Control",
    "section": "Resources",
    "text": "Resources\nToday’s class is a digest of the following resources:\n\nVideo lecture STAT 545 Episode 2-A: Git and GitHub for an Organized Project\nOnline tutorials:\n\nThe basic version control workflow (without branching): Happy git w R: Chapter 20.\nStarting with GitHub: Chapter 15: New project, GitHub first\nStarting with files on your computer, and didn’t set up git: Chapter 16: Existing project, GitHub first\nStarting with files on your computer, and did set up git: Chapter 17: Existing project, GitHub Last\n\n\nSome additional resources that you might find useful:\n\nRead the Understanding the GitHub flow to get a sense of branching.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-get-acquainted-with-github",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-get-acquainted-with-github",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: Get Acquainted with GitHub",
    "text": "Instructor demo: Get Acquainted with GitHub\n\nRepositories, Organizations, and Personal Accounts\nA repository stores files and the history of the files; the usual convention is to use a single repository to organize a single project.\nGitHub is a place where repositories can live online. Being online provides us a way to share and collaborate on projects. It also serves as a backup for your project.\nExample 1: Grace’s GitHub page\nExample 1: The STAT 545 webpage\nThe first repository lives under Grace’s personal Github account. The second repository lives under the UBC-STAT organization. Organizations are useful if you have lots of different projects with a common theme which lots of people are collaborating on.\n\n\nUseful Github tips for the course\n\nAll of your projects in this class will live in the STAT 545 @ UBC Organization.\nWhen you watch a Github repo, you get notifications when things happen in them. So if you “Watch” the STAT 545 webpage repo, then you will get email notifications when I update the site!\nThe Issues page on a Github repo is a forum where Github users can bring up issues related to the repository. Our commmunication guidelines suggest that you post an Issue on your homework repo if you have concerns about your grade.\n\n\n\nUseful Github tips for the course\n\nAll of your projects in this class will live in the STAT 545 @ UBC Organization.\nWhen you watch a Github repo, you get notifications when things happen in them. So if you “Watch” the STAT 545 webpage repo, then you will get email notifications when I update the site!\nThe Issues page on a Github repo is a forum where Github users can bring up issues related to the repository. Our commmunication guidelines suggest that you post an Issue on your homework repo if you have concerns about your grade.\n\n\n\nYour turn: working on Github\nTry making your own Github repository and editing it on Github! (This exercise is slightly adapted from Data Carpentries.)\n\nGo to your GitHub profile. Eg. Mine is https://github.com/katieburak.\nCreate a new GitHub repository by clicking the + symbol in the top bar and using the dropdown menu to create a new repository.\nName your repository stat-545-demo-YOUR-NAME. In the description write “STAT 545 Demo”. Check the box for initializing the repository for adding a README file.\nYou are now redirected to the repository main page. The repository page tells you you have 1 commit. Click on it to get to the history page. This tells you all the changes that have been tracked for the files in the repository so far.\nGo back to your repository main page. Click on README.md, then click “edit this file”. Add the following information into the README.md file:\n\nYour name\nWhat kind of scientist do you tell people you are at dinner parties?\n\nCommit your changes: click the commit changes button, and briefly summarize the changes you’ve made in the Commit message.\nCheck out the Github commit history again. Has anything changed?",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-working-locally-and-synchronizing-with-github",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-working-locally-and-synchronizing-with-github",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: working locally, and synchronizing with Github",
    "text": "Instructor demo: working locally, and synchronizing with Github\nWe will go through the Data Carpentries tutorial for this together. This demonstrates how to keep and work on the project files in a local repository on your machine, and how to keep it in synch with a remote Github repository.",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  },
  {
    "objectID": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-merge-conflicts",
    "href": "webpages/lectures/lec2b_versioncontrol.html#instructor-demo-merge-conflicts",
    "title": "Lecture 2B: Version Control",
    "section": "Instructor demo: merge conflicts",
    "text": "Instructor demo: merge conflicts\nMerge conflicts happen when we’ve created multiple versions of files that can’t be obviously combined into one definitive version.\nHere is an example of something that would not cause a merge conflict:\n\nAt 9am, my TA pulls from the STAT 545 repository, makes a local change to the course dashboard, and commits and pushes her changes.\nAt 10am, I forget to pull from the STAT 545 repository, and start working on the Day 1 notes locally.\nWhen I commit and push, Git is a bit confused, because I wasn’t working off of the “freshest” version of the STAT 545 repository - but since my TA and I were working on different lines of code, it will fairly seamlessly figure out that the right thing to do is to add my changes to the Day 1 notes to the current version of the STAT 545 repository online.\n\nHere is an example of something that WOULD cause a merge conflict:\n\nAt 9am, my TA and I both pull from the STAT 545 repository.\nAt 10am, my TA changes the front page to say “STAT 555 @ UBC”, and commits/pushes those changes.\nAt 11am, I change the front page (without pulling!!!) to say “STAT 777 @ UBC”.\nWhen I commit and push, Git doesn’t know what to do. Should it make the version that says “STAT 555 @ UBC” or “STAT 777 @ UBC” the definitive version? The push will fail, and Git will tell us we need to fix the conflict and then commit the result.\n\nHow do we fix this?\n\nPull.\nOpen the file that caused the merge conflict. You should see something like this:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nSTAT 555 @ UBC\n=======\nSTAT 777 @ UBC\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 526363991d21ed20e7e0c57b5e99d944ac5ce5aa\n\nThe stuff below the &lt;&lt;&lt;&lt;&lt;&lt;&lt; and above the ======= is what was in your local version; the stuff above the &gt;&gt;&gt;&gt;&gt;&gt;&gt; and below the ======= is what was in the remote conflicting version. Decide what you want to have on the offending line (e.g. “STAT 555 @ UBC”), and replace the whole block of text above with that.\nSave and commit the file. (An informative message here might be “Fixing a merge conflict.”) You should now be able to successfully push!\n\n\nYour turn: Branching, merging, and pull requests\nFind a partner. In this exercise, we will learn how to have different team members save their work separately on branches, and how to merge those changes to the main project branch.\n\nTeammate A adds Teammate B to their stat545-demo repository as a collaborator. (Go to Settings from the main repo page, then Access =&gt; Collaborators). This should send Teammate B an email with a collaboration invitation; accept that invitation.\nTeammate B clones Teammate A’s stat545-demo repository.\nOn their own computer, Teammate B will make a new branch in Teammate A’s stat545-demo repository. You can do this either on Github by clicking on “1 branch” on the repo homepage then the green “New branch” button, or on your own computer in R Studio with the “New Branch” button.\nOn their own computer, Teammate B will create a new file in the newly created branch, then commit and push it.\nTeammate B will start a pull request (basically a request to merge content onto the main branch) on GitHub, by going to “Pull Requests” -&gt; “New Pull Request”, and selecting the branch you intend to merge to the main branch. In this pull request, include a comment and title indicating (at a high level) what the change made is about.\nTeammate A will follow the instructions here to merge the pull request.\n\nToo easy? Then either switch roles, or try creating a pull request that causes a merge conflict and resolving it!",
    "crumbs": [
      "Lecture 2B: Version Control"
    ]
  }
]